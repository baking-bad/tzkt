// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tzkt.Data;

namespace Tzkt.Data.Migrations
{
    [DbContext(typeof(TzktContext))]
    [Migration("20210714125513_Triggers")]
    partial class Triggers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Tzkt.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .IsFixedLength(true);

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegationLevel")
                        .HasColumnType("integer");

                    b.Property<int>("DelegationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("MigrationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("OriginationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevealsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Staked")
                        .HasColumnType("boolean");

                    b.Property<int>("TransactionsCount")
                        .HasColumnType("integer");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DelegateId");

                    b.HasIndex("FirstLevel");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Metadata")
                        .HasMethod("gin")
                        .HasOperators(new[] { "jsonb_path_ops" });

                    b.HasIndex("Staked");

                    b.HasIndex("Type");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<byte>("Type");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ActivationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("ActivationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.AppState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountCounter")
                        .HasColumnType("integer");

                    b.Property<int>("AccountsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ActivationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BallotOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapCounter")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapKeyCounter")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapUpdateCounter")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksCount")
                        .HasColumnType("integer");

                    b.Property<string>("Chain")
                        .HasColumnType("text");

                    b.Property<string>("ChainId")
                        .HasColumnType("text");

                    b.Property<int>("CommitmentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("CyclesCount")
                        .HasColumnType("integer");

                    b.Property<int>("DelegationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleBakingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleEndorsingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsementOpsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("KnownHead")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSync")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ManagerCounter")
                        .HasColumnType("integer");

                    b.Property<int>("MigrationOpsCount")
                        .HasColumnType("integer");

                    b.Property<string>("NextProtocol")
                        .HasColumnType("text");

                    b.Property<int>("NonceRevelationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("OperationCounter")
                        .HasColumnType("integer");

                    b.Property<int>("OriginationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<int>("ProtocolsCount")
                        .HasColumnType("integer");

                    b.Property<double>("QuoteBtc")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteCny")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteEth")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteEur")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteJpy")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteKrw")
                        .HasColumnType("double precision");

                    b.Property<int>("QuoteLevel")
                        .HasColumnType("integer");

                    b.Property<double>("QuoteUsd")
                        .HasColumnType("double precision");

                    b.Property<int>("RevealOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevelationPenaltyOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ScriptCounter")
                        .HasColumnType("integer");

                    b.Property<int>("StorageCounter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TransactionOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("VotingEpoch")
                        .HasColumnType("integer");

                    b.Property<int>("VotingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppState");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AccountCounter = 0,
                            AccountsCount = 0,
                            ActivationOpsCount = 0,
                            BallotOpsCount = 0,
                            BigMapCounter = 0,
                            BigMapKeyCounter = 0,
                            BigMapUpdateCounter = 0,
                            BlocksCount = 0,
                            CommitmentsCount = 0,
                            Cycle = -1,
                            CyclesCount = 0,
                            DelegationOpsCount = 0,
                            DoubleBakingOpsCount = 0,
                            DoubleEndorsingOpsCount = 0,
                            EndorsementOpsCount = 0,
                            Hash = "",
                            KnownHead = 0,
                            LastSync = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = -1,
                            ManagerCounter = 0,
                            MigrationOpsCount = 0,
                            NextProtocol = "",
                            NonceRevelationOpsCount = 0,
                            OperationCounter = 0,
                            OriginationOpsCount = 0,
                            ProposalOpsCount = 0,
                            ProposalsCount = 0,
                            Protocol = "",
                            ProtocolsCount = 0,
                            QuoteBtc = 0.0,
                            QuoteCny = 0.0,
                            QuoteEth = 0.0,
                            QuoteEur = 0.0,
                            QuoteJpy = 0.0,
                            QuoteKrw = 0.0,
                            QuoteLevel = -1,
                            QuoteUsd = 0.0,
                            RevealOpsCount = 0,
                            RevelationPenaltyOpsCount = 0,
                            ScriptCounter = 0,
                            StorageCounter = 0,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionOpsCount = 0,
                            VotingEpoch = -1,
                            VotingPeriod = -1
                        });
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakerCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<long>("BlockDeposits")
                        .HasColumnType("bigint");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<long>("DelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<int>("DelegatorsCount")
                        .HasColumnType("integer");

                    b.Property<long>("DoubleBakingLostDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingLostFees")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingLostRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostFees")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("Endorsements")
                        .HasColumnType("integer");

                    b.Property<double>("ExpectedBlocks")
                        .HasColumnType("double precision");

                    b.Property<double>("ExpectedEndorsements")
                        .HasColumnType("double precision");

                    b.Property<long>("ExtraBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("ExtraBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("ExtraBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("FutureBlockDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("FutureBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("FutureBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("FutureEndorsementDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("FutureEndorsementRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("FutureEndorsements")
                        .HasColumnType("integer");

                    b.Property<long>("MissedEndorsementRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedEndorsements")
                        .HasColumnType("integer");

                    b.Property<long>("MissedExtraBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("MissedExtraBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedExtraBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("MissedOwnBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("MissedOwnBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedOwnBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("OwnBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("OwnBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("RevelationLostFees")
                        .HasColumnType("bigint");

                    b.Property<long>("RevelationLostRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("RevelationRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("Rolls")
                        .HasColumnType("integer");

                    b.Property<long>("StakingBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("UncoveredEndorsementRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("UncoveredEndorsements")
                        .HasColumnType("integer");

                    b.Property<long>("UncoveredExtraBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("UncoveredExtraBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("UncoveredExtraBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("UncoveredOwnBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("UncoveredOwnBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("UncoveredOwnBlocks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Cycle");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Cycle", "BakerId")
                        .IsUnique();

                    b.ToTable("BakerCycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("Slots")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Cycle");

                    b.HasIndex("Level");

                    b.HasIndex("Cycle", "BakerId");

                    b.ToTable("BakingRights");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BallotOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("Rolls")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Vote")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Epoch");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("Period");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("BallotOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BigMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ActiveKeys")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<byte[]>("KeyType")
                        .HasColumnType("bytea");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Ptr")
                        .HasColumnType("integer");

                    b.Property<string>("StoragePath")
                        .HasColumnType("text");

                    b.Property<int>("Tags")
                        .HasColumnType("integer");

                    b.Property<int>("TotalKeys")
                        .HasColumnType("integer");

                    b.Property<int>("Updates")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ValueType")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("Ptr");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Ptr")
                        .IsUnique();

                    b.ToTable("BigMaps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BigMapKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BigMapPtr")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<string>("JsonKey")
                        .HasColumnType("jsonb");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb");

                    b.Property<string>("KeyHash")
                        .HasMaxLength(54)
                        .HasColumnType("character varying(54)");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RawKey")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RawValue")
                        .HasColumnType("bytea");

                    b.Property<int>("Updates")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BigMapPtr");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("JsonKey")
                        .HasMethod("gin")
                        .HasOperators(new[] { "jsonb_path_ops" });

                    b.HasIndex("JsonValue")
                        .HasMethod("gin")
                        .HasOperators(new[] { "jsonb_path_ops" });

                    b.HasIndex("LastLevel");

                    b.HasIndex("BigMapPtr", "Active")
                        .HasFilter("\"Active\" = true");

                    b.HasIndex("BigMapPtr", "KeyHash");

                    b.ToTable("BigMapKeys");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BigMapUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int?>("BigMapKeyId")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapPtr")
                        .HasColumnType("integer");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("MigrationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginationId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RawValue")
                        .HasColumnType("bytea");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BigMapKeyId")
                        .HasFilter("\"BigMapKeyId\" is not null");

                    b.HasIndex("BigMapPtr");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("MigrationId")
                        .HasFilter("\"MigrationId\" is not null");

                    b.HasIndex("OriginationId")
                        .HasFilter("\"OriginationId\" is not null");

                    b.HasIndex("TransactionId")
                        .HasFilter("\"TransactionId\" is not null");

                    b.ToTable("BigMapUpdates");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<long>("Deposit")
                        .HasColumnType("bigint");

                    b.Property<int>("Events")
                        .HasColumnType("integer");

                    b.Property<long>("Fees")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("LBEscapeEma")
                        .HasColumnType("integer");

                    b.Property<bool>("LBEscapeVote")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Operations")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProtoCode")
                        .HasColumnType("integer");

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<int?>("RevelationId")
                        .HasColumnType("integer");

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<int?>("SoftwareId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Validations")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Level")
                        .IsUnique();

                    b.HasIndex("ProtoCode");

                    b.HasIndex("RevelationId")
                        .IsUnique();

                    b.HasIndex("SoftwareId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Commitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(37)
                        .HasColumnType("character(37)")
                        .IsFixedLength(true);

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Commitments");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character(64)")
                        .IsFixedLength(true);

                    b.Property<int>("SnapshotIndex")
                        .HasColumnType("integer");

                    b.Property<int>("SnapshotLevel")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBakers")
                        .HasColumnType("integer");

                    b.Property<long>("TotalDelegated")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalDelegators")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRolls")
                        .HasColumnType("integer");

                    b.Property<long>("TotalStaking")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Index");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int?>("PrevDelegateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("PrevDelegateId");

                    b.HasIndex("SenderId");

                    b.ToTable("DelegationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegatorCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("DelegatorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Cycle");

                    b.HasIndex("DelegatorId");

                    b.HasIndex("Cycle", "BakerId");

                    b.HasIndex("Cycle", "DelegatorId")
                        .IsUnique();

                    b.ToTable("DelegatorCycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<long>("AccuserReward")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<long>("OffenderLostDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("OffenderLostFee")
                        .HasColumnType("bigint");

                    b.Property<long>("OffenderLostReward")
                        .HasColumnType("bigint");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleBakingOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<long>("AccuserReward")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<long>("OffenderLostDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("OffenderLostFee")
                        .HasColumnType("bigint");

                    b.Property<long>("OffenderLostReward")
                        .HasColumnType("bigint");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleEndorsingOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsementOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<long>("Deposit")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("EndorsementOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.MigrationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("BalanceChange")
                        .HasColumnType("bigint");

                    b.Property<int?>("BigMapUpdates")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("ScriptId")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Level");

                    b.HasIndex("ScriptId");

                    b.HasIndex("StorageId");

                    b.ToTable("MigrationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("RevealedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("NonceRevelationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.OriginationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int?>("BigMapUpdates")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int?>("ScriptId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DelegateId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("Level");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OpHash");

                    b.HasIndex("ScriptId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StorageId");

                    b.ToTable("OriginationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("FirstPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("LastPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("Rolls")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Epoch");

                    b.HasIndex("Hash");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Duplicated")
                        .HasColumnType("boolean");

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("Rolls")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Epoch");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("Period");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProposalOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BallotQuorumMax")
                        .HasColumnType("integer");

                    b.Property<int>("BallotQuorumMin")
                        .HasColumnType("integer");

                    b.Property<long>("BlockDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockReward0")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockReward1")
                        .HasColumnType("bigint");

                    b.Property<int>("BlocksPerCommitment")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerCycle")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerSnapshot")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerVoting")
                        .HasColumnType("integer");

                    b.Property<int>("ByteCost")
                        .HasColumnType("integer");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<long>("EndorsementDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementReward0")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementReward1")
                        .HasColumnType("bigint");

                    b.Property<int>("EndorsersPerBlock")
                        .HasColumnType("integer");

                    b.Property<int>("FirstCycle")
                        .HasColumnType("integer");

                    b.Property<int>("FirstCycleLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("HardBlockGasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("HardOperationGasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("HardOperationStorageLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("LBEscapeThreshold")
                        .HasColumnType("integer");

                    b.Property<int>("LBSubsidy")
                        .HasColumnType("integer");

                    b.Property<int>("LBSunsetLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("NoRewardCycles")
                        .HasColumnType("integer");

                    b.Property<int>("OriginationSize")
                        .HasColumnType("integer");

                    b.Property<int>("PreservedCycles")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalQuorum")
                        .HasColumnType("integer");

                    b.Property<int>("RampUpCycles")
                        .HasColumnType("integer");

                    b.Property<long>("RevelationReward")
                        .HasColumnType("bigint");

                    b.Property<int>("TimeBetweenBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("TokensPerRoll")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Btc")
                        .HasColumnType("double precision");

                    b.Property<double>("Cny")
                        .HasColumnType("double precision");

                    b.Property<double>("Eth")
                        .HasColumnType("double precision");

                    b.Property<double>("Eur")
                        .HasColumnType("double precision");

                    b.Property<double>("Jpy")
                        .HasColumnType("double precision");

                    b.Property<double>("Krw")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Usd")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Level")
                        .IsUnique();

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevealOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("RevealOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevelationPenaltyOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("LostFees")
                        .HasColumnType("bigint");

                    b.Property<long>("LostReward")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.ToTable("RevelationPenaltyOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodeHash")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CodeSchema")
                        .HasColumnType("bytea");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<bool>("Current")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("MigrationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginationId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ParameterSchema")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("StorageSchema")
                        .HasColumnType("bytea");

                    b.Property<int>("TypeHash")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ContractId", "Current")
                        .HasFilter("\"Current\" = true");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("Tzkt.Data.Models.SnapshotBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.ToTable("SnapshotBalances");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BlocksCount")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("ShortHash")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Cycle")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("TotalActivated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalBanished")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalBootstrapped")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalBurned")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCommitments")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalFrozen")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalVested")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Cycle")
                        .IsUnique()
                        .HasFilter("\"Cycle\" IS NOT NULL");

                    b.HasIndex("Date")
                        .IsUnique()
                        .HasFilter("\"Date\" IS NOT NULL");

                    b.HasIndex("Level")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<bool>("Current")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("MigrationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginationId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RawValue")
                        .HasColumnType("bytea");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("ContractId", "Current")
                        .HasFilter("\"Current\" = true");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Tzkt.Data.Models.TransactionOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("BigMapUpdates")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Entrypoint")
                        .HasColumnType("text");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<short?>("InternalDelegations")
                        .HasColumnType("smallint");

                    b.Property<short?>("InternalOperations")
                        .HasColumnType("smallint");

                    b.Property<short?>("InternalOriginations")
                        .HasColumnType("smallint");

                    b.Property<short?>("InternalTransactions")
                        .HasColumnType("smallint");

                    b.Property<string>("JsonParameters")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength(true);

                    b.Property<byte[]>("RawParameters")
                        .HasColumnType("bytea");

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("JsonParameters")
                        .HasMethod("gin")
                        .HasOperators(new[] { "jsonb_path_ops" });

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("StorageId");

                    b.HasIndex("TargetId");

                    b.ToTable("TransactionOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BallotsQuorum")
                        .HasColumnType("integer");

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("NayBallots")
                        .HasColumnType("integer");

                    b.Property<int?>("NayRolls")
                        .HasColumnType("integer");

                    b.Property<int?>("ParticipationEma")
                        .HasColumnType("integer");

                    b.Property<int?>("PassBallots")
                        .HasColumnType("integer");

                    b.Property<int?>("PassRolls")
                        .HasColumnType("integer");

                    b.Property<int?>("ProposalsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("Supermajority")
                        .HasColumnType("integer");

                    b.Property<int?>("TopRolls")
                        .HasColumnType("integer");

                    b.Property<int?>("TopUpvotes")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalBakers")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalRolls")
                        .HasColumnType("integer");

                    b.Property<int?>("UpvotesQuorum")
                        .HasColumnType("integer");

                    b.Property<int?>("YayBallots")
                        .HasColumnType("integer");

                    b.Property<int?>("YayRolls")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Index");

                    b.HasIndex("Epoch");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("VotingPeriods");
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("Rolls")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Period");

                    b.HasIndex("Period", "BakerId")
                        .IsUnique();

                    b.ToTable("VotingSnapshots");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Contract", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.Account");

                    b.Property<int>("CodeHash")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Spendable")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeHash")
                        .HasColumnType("integer");

                    b.Property<int?>("Tzips")
                        .HasColumnType("integer");

                    b.Property<int?>("WeirdDelegateId")
                        .HasColumnType("integer");

                    b.HasIndex("CodeHash");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TypeHash");

                    b.HasIndex("WeirdDelegateId");

                    b.HasIndex("Type", "Kind")
                        .HasFilter("\"Type\" = 2");

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("Tzkt.Data.Models.User", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.Account");

                    b.Property<bool?>("Activated")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<bool>("Revealed")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue((byte)0);
                });

            modelBuilder.Entity("Tzkt.Data.Models.Delegate", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.User");

                    b.Property<int>("ActivationLevel")
                        .HasColumnType("integer");

                    b.Property<int>("BallotsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksCount")
                        .HasColumnType("integer");

                    b.Property<int>("DeactivationLevel")
                        .HasColumnType("integer");

                    b.Property<int>("DelegatorsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleBakingCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleEndorsingCount")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsementsCount")
                        .HasColumnType("integer");

                    b.Property<long>("FrozenDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("FrozenFees")
                        .HasColumnType("bigint");

                    b.Property<long>("FrozenRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("NonceRevelationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevelationPenaltiesCount")
                        .HasColumnType("integer");

                    b.Property<int?>("SoftwareId")
                        .HasColumnType("integer");

                    b.Property<long>("StakingBalance")
                        .HasColumnType("bigint");

                    b.HasIndex("SoftwareId");

                    b.HasIndex("Type", "Staked")
                        .HasFilter("\"Type\" = 1");

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("Tzkt.Data.Models.Account", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany("DelegatedAccounts")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Block", "FirstBlock")
                        .WithMany("CreatedAccounts")
                        .HasForeignKey("FirstLevel")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delegate");

                    b.Navigation("FirstBlock");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ActivationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.User", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Activations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BallotOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Ballots")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Proposal");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId");

                    b.HasOne("Tzkt.Data.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtoCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.NonceRevelationOperation", "Revelation")
                        .WithOne("RevealedBlock")
                        .HasForeignKey("Tzkt.Data.Models.Block", "RevelationId")
                        .HasPrincipalKey("Tzkt.Data.Models.NonceRevelationOperation", "RevealedLevel");

                    b.HasOne("Tzkt.Data.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId");

                    b.Navigation("Baker");

                    b.Navigation("Protocol");

                    b.Navigation("Revelation");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Account", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Delegations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "PrevDelegate")
                        .WithMany()
                        .HasForeignKey("PrevDelegateId");

                    b.HasOne("Tzkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Delegate");

                    b.Navigation("Initiator");

                    b.Navigation("PrevDelegate");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Accuser")
                        .WithMany()
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("DoubleBakings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accuser");

                    b.Navigation("Block");

                    b.Navigation("Offender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Accuser")
                        .WithMany()
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("DoubleEndorsings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accuser");

                    b.Navigation("Block");

                    b.Navigation("Offender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsementOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Endorsements")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Delegate");
                });

            modelBuilder.Entity("Tzkt.Data.Models.MigrationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Migrations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId");

                    b.HasOne("Tzkt.Data.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.Navigation("Account");

                    b.Navigation("Block");

                    b.Navigation("Script");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Revelations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baker");

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.OriginationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Account", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Originations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Tzkt.Data.Models.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId");

                    b.HasOne("Tzkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.Navigation("Block");

                    b.Navigation("Contract");

                    b.Navigation("Delegate");

                    b.Navigation("Initiator");

                    b.Navigation("Manager");

                    b.Navigation("Script");

                    b.Navigation("Sender");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Proposals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Proposal");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevealOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Reveals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevelationPenaltyOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("RevelationPenalties")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baker");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Tzkt.Data.Models.TransactionOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Account", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.HasOne("Tzkt.Data.Models.Account", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Block");

                    b.Navigation("Initiator");

                    b.Navigation("Sender");

                    b.Navigation("Storage");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Contract", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Tzkt.Data.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Tzkt.Data.Models.User", "WeirdDelegate")
                        .WithMany()
                        .HasForeignKey("WeirdDelegateId");

                    b.Navigation("Creator");

                    b.Navigation("Manager");

                    b.Navigation("WeirdDelegate");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Delegate", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.Navigation("Activations");

                    b.Navigation("Ballots");

                    b.Navigation("CreatedAccounts");

                    b.Navigation("Delegations");

                    b.Navigation("DoubleBakings");

                    b.Navigation("DoubleEndorsings");

                    b.Navigation("Endorsements");

                    b.Navigation("Migrations");

                    b.Navigation("Originations");

                    b.Navigation("Proposals");

                    b.Navigation("Reveals");

                    b.Navigation("RevelationPenalties");

                    b.Navigation("Revelations");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.Navigation("RevealedBlock");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Delegate", b =>
                {
                    b.Navigation("DelegatedAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
