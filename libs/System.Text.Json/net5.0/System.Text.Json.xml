<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Text.Json</name>
    </assembly>
    <members>
        <member name="P:System.HexConverter.CharToHexLookup">
            <summary>Map from an ASCII char to its hex value, e.g. arr['b'] == 11. 0xFF means it's not a hex digit.</summary>
        </member>
        <member name="T:System.Text.Json.JsonDocument">
            <summary>
              Represents the structure of a JSON value in a lightweight, read-only form.
            </summary>
            <remarks>
              This class utilizes resources from pooled memory to minimize the garbage collector (GC)
              impact in high-usage scenarios. Failure to properly Dispose this object will result in
              the memory not being returned to the pool, which will cause an increase in GC impact across
              various parts of the framework.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonDocument.RootElement">
            <summary>
              The <see cref="T:System.Text.Json.JsonElement"/> representing the value of the document.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
             Write the document into the provided writer as a JSON value.
            </summary>
            <param name="writer"></param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              This <see cref="P:System.Text.Json.JsonDocument.RootElement"/>'s <see cref="P:System.Text.Json.JsonElement.ValueKind"/> would result in an invalid JSON.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.Location">
            <summary>
            Index into the payload
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.SizeOrLength">
            <summary>
            length of text in JSON payload (or number of elements if its a JSON array)
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.HasComplexChildren">
            <summary>
            Number: Use scientific format.
            String/PropertyName: Unescaping is required.
            Array: At least one element is an object/array.
            Otherwise; false
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
             <summary>
               Parse memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.
             </summary>
             <remarks>
               <para>
                 The <see cref="T:System.ReadOnlyMemory`1"/> value will be used for the entire lifetime of the
                 JsonDocument object, and the caller must ensure that the data therein does not change during
                 the object lifetime.
               </para>
            
               <para>
                 Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.
               </para>
             </remarks>
             <param name="utf8Json">JSON text to parse.</param>
             <param name="options">Options to control the reader behavior during parsing.</param>
             <returns>
               A JsonDocument representation of the JSON value.
             </returns>
             <exception cref="T:System.Text.Json.JsonException">
               <paramref name="utf8Json"/> does not represent a valid single JSON value.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="options"/> contains unsupported options.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
             <summary>
               Parse a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.
             </summary>
             <remarks>
               <para>
                 The <see cref="T:System.Buffers.ReadOnlySequence`1"/> may be used for the entire lifetime of the
                 JsonDocument object, and the caller must ensure that the data therein does not change during
                 the object lifetime.
               </para>
            
               <para>
                 Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.
               </para>
             </remarks>
             <param name="utf8Json">JSON text to parse.</param>
             <param name="options">Options to control the reader behavior during parsing.</param>
             <returns>
               A JsonDocument representation of the JSON value.
             </returns>
             <exception cref="T:System.Text.Json.JsonException">
               <paramref name="utf8Json"/> does not represent a valid single JSON value.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="options"/> contains unsupported options.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              JsonDocument.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              JsonDocument.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
              A Task to produce a JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parse text representing a single JSON value into a JsonDocument.
            </summary>
            <remarks>
              The <see cref="T:System.ReadOnlyMemory`1"/> value may be used for the entire lifetime of the
              JsonDocument object, and the caller must ensure that the data therein does not change during
              the object lifetime.
            </remarks>
            <param name="json">JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parse text representing a single JSON value into a JsonDocument.
            </summary>
            <param name="json">JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
             <summary>
               Attempts to parse one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <param name="document">Receives the parsed document.</param>
             <returns>
               <see langword="true"/> if a value was read and parsed into a JsonDocument,
               <see langword="false"/> if the reader ran out of data while parsing.
               All other situations result in an exception being thrown.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown, or <see langword="false"/>
                 is returned, the reader is reset to the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
             <summary>
               Parses one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <returns>
               A JsonDocument representing the value (and nested values) read from the reader.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="T:System.Text.Json.JsonDocumentOptions">
            <summary>
            Provides the ability for the user to define custom behavior when parsing JSON to create a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
            <summary>
            Defines how the <see cref="T:System.Text.Json.Utf8JsonReader"/> should handle comments when reading through the JSON.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling"/> enum range).
            </exception>
            <remarks>
            By default <exception cref="T:System.Text.Json.JsonException"/> is thrown if a comment is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON, with the default (i.e. 0) indicating a max depth of 64.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being read.
            </summary>
            <remarks>
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonException"/> is thrown if a trailing comma is encountered.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonElement">
            <summary>
              Represents a specific JSON value within a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
            <summary>
              An enumerable and enumerator for the contents of a JSON array.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator"/> value that can be used to iterate
              through the array.
            </returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ValueKind">
            <summary>
              The <see cref="T:System.Text.Json.JsonValueKind"/> that the value is.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
            <summary>
              Get the value at a specified index when the current value is a
              <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
              <paramref name="index"/> is not in the range [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength"/>()).
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetArrayLength">
            <summary>
              Get the number of values contained within the current array value.
            </summary>
            <returns>The number of values contained within the current array value.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="propertyName"/>.
             </summary>
             <remarks>
               Property name matching is performed as an ordinal, case-sensitive, comparison.
            
               If a property is defined multiple times for the same object, the last such definition is
               what is matched.
             </remarks>
             <param name="propertyName">Name of the property whose value to return.</param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="propertyName"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="propertyName"/>.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property whose value to return.</param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="utf8PropertyName"/>.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="utf8PropertyName">
               The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.
             </param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="propertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property to find.</param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="propertyName"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="propertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property to find.</param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="utf8PropertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="utf8PropertyName">
               The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.
             </param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBoolean">
            <summary>
              Gets the value of the element as a <see cref="T:System.Boolean"/>.
            </summary>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.Boolean"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is neither <see cref="F:System.Text.Json.JsonValueKind.True"/> or
              <see cref="F:System.Text.Json.JsonValueKind.False"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetString">
            <summary>
              Gets the value of the element as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
              This method does not create a string representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is neither <see cref="F:System.Text.Json.JsonValueKind.String"/> nor <see cref="F:System.Text.Json.JsonValueKind.Null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>
              Attempts to represent the current JSON string as bytes assuming it is Base64 encoded.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
             This method does not create a byte[] representation of values other than base 64 encoded JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes.
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
            <summary>
              Gets the value of the element as bytes.
            </summary>
            <remarks>
              This method does not create a byte[] representation of values other than Base64 encoded JSON strings.
            </remarks>
            <returns>The value decode to bytes.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value is not encoded as Base64 text and hence cannot be decoded to bytes.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.SByte"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSByte">
            <summary>
              Gets the current JSON number as an <see cref="T:System.SByte"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.SByte"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.SByte"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Byte"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetByte">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Byte"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Byte"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Byte"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.Int16"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt16">
            <summary>
              Gets the current JSON number as an <see cref="T:System.Int16"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.Int16"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.Int16"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt16"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt16">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt16"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt16"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt16"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.Int32"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt32">
            <summary>
              Gets the current JSON number as an <see cref="T:System.Int32"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.Int32"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.Int32"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt32"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt32">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt32"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt32"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt32"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Int64"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt64">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Int64"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Int64"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Int64"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt64"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt64">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt64"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt64"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
             <summary>
               Attempts to represent the current JSON number as a <see cref="T:System.Double"/>.
             </summary>
             <param name="value">Receives the value.</param>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method does not return <see langword="false"/> for values larger than
                 <see cref="F:System.Double.MaxValue"/> (or smaller than <see cref="F:System.Double.MinValue"/>),
                 instead <see langword="true"/> is returned and <see cref="F:System.Double.PositiveInfinity"/> (or
                 <see cref="F:System.Double.NegativeInfinity"/>) is emitted.
               </para>
             </remarks>
             <returns>
               <see langword="true"/> if the number can be represented as a <see cref="T:System.Double"/>,
               <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDouble">
             <summary>
               Gets the current JSON number as a <see cref="T:System.Double"/>.
             </summary>
             <returns>The current JSON number as a <see cref="T:System.Double"/>.</returns>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method returns <see cref="F:System.Double.PositiveInfinity"/> (or
                 <see cref="F:System.Double.NegativeInfinity"/>) for values larger than
                 <see cref="F:System.Double.MaxValue"/> (or smaller than <see cref="F:System.Double.MinValue"/>).
               </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.FormatException">
               The value cannot be represented as a <see cref="T:System.Double"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
             <summary>
               Attempts to represent the current JSON number as a <see cref="T:System.Single"/>.
             </summary>
             <param name="value">Receives the value.</param>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method does not return <see langword="false"/> for values larger than
                 <see cref="F:System.Single.MaxValue"/> (or smaller than <see cref="F:System.Single.MinValue"/>),
                 instead <see langword="true"/> is returned and <see cref="F:System.Single.PositiveInfinity"/> (or
                 <see cref="F:System.Single.NegativeInfinity"/>) is emitted.
               </para>
             </remarks>
             <returns>
               <see langword="true"/> if the number can be represented as a <see cref="T:System.Single"/>,
               <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSingle">
             <summary>
               Gets the current JSON number as a <see cref="T:System.Single"/>.
             </summary>
             <returns>The current JSON number as a <see cref="T:System.Single"/>.</returns>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method returns <see cref="F:System.Single.PositiveInfinity"/> (or
                 <see cref="F:System.Single.NegativeInfinity"/>) for values larger than
                 <see cref="F:System.Single.MaxValue"/> (or smaller than <see cref="F:System.Single.MinValue"/>).
               </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.FormatException">
               The value cannot be represented as a <see cref="T:System.Single"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Decimal"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.GetRawText"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDecimal">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Decimal"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Decimal"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.GetRawText"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a DateTime representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.DateTime"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTime">
            <summary>
              Gets the value of the element as a <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
              This method does not create a DateTime representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.DateTime"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.DateTime"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a DateTimeOffset representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.DateTimeOffset"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
            <summary>
              Gets the value of the element as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <remarks>
              This method does not create a DateTimeOffset representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.DateTimeOffset"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.DateTimeOffset"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a Guid representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.Guid"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetGuid">
            <summary>
              Gets the value of the element as a <see cref="T:System.Guid"/>.
            </summary>
            <remarks>
              This method does not create a Guid representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.Guid"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Guid"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetRawText">
            <summary>
              Gets the original input data backing this value, returning it as a <see cref="T:System.String"/>.
            </summary>
            <returns>
              The original input data backing this value, returning it as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
            <summary>
              Compares <paramref name="text" /> to the string value of this element.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the string value of this element matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              the result of calling <see cref="M:System.Text.Json.JsonElement.GetString" />, but avoids creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
              Compares the text represented by <paramref name="utf8Text" /> to the string value of this element.
            </summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>
              <see langword="true" /> if the string value of this element has the same UTF-8 encoding as
              <paramref name="utf8Text" />, <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of the string produced by UTF-8 decoding
              <paramref name="utf8Text" /> with the result of calling <see cref="M:System.Text.Json.JsonElement.GetString" />, but avoids creating the
              string instances.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
            <summary>
              Compares <paramref name="text" /> to the string value of this element.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the string value of this element matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              the result of calling <see cref="M:System.Text.Json.JsonElement.GetString" />, but avoids creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the element into the provided writer as a JSON value.
            </summary>
            <param name="writer">The writer.</param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is <see cref="F:System.Text.Json.JsonValueKind.Undefined"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateArray">
            <summary>
              Get an enumerator to enumerate the values in the JSON array represented by this JsonElement.
            </summary>
            <returns>
              An enumerator to enumerate the values in the JSON array represented by this JsonElement.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateObject">
            <summary>
              Get an enumerator to enumerate the properties in the JSON object represented by this JsonElement.
            </summary>
            <returns>
              An enumerator to enumerate the properties in the JSON object represented by this JsonElement.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.ToString">
             <summary>
               Gets a string representation for the current value appropriate to the value type.
             </summary>
             <remarks>
               <para>
                 For JsonElement built from <see cref="T:System.Text.Json.JsonDocument"/>:
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.Null"/>, <see cref="F:System.String.Empty"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.True"/>, <see cref="F:System.Boolean.TrueString"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.False"/>, <see cref="F:System.Boolean.FalseString"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.String"/>, the value of <see cref="M:System.Text.Json.JsonElement.GetString"/>() is returned.
               </para>
            
               <para>
                 For other types, the value of <see cref="M:System.Text.Json.JsonElement.GetRawText"/>() is returned.
               </para>
             </remarks>
             <returns>
               A string representation for the current value appropriate to the value type.
             </returns>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.Clone">
            <summary>
              Get a JsonElement which can be safely stored beyond the lifetime of the
              original <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <returns>
              A JsonElement which can be safely stored beyond the lifetime of the
              original <see cref="T:System.Text.Json.JsonDocument"/>.
            </returns>
            <remarks>
              <para>
                If this JsonElement is itself the output of a previous call to Clone, or
                a value contained within another JsonElement which was the output of a previous
                call to Clone, this method results in no additional memory allocation.
              </para>
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
            <summary>
              An enumerable and enumerator for the properties of a JSON object.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
            <summary>
              Returns an enumerator that iterates the properties of an object.
            </summary>
            <returns>
              An <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator"/> value that can be used to iterate
              through the object.
            </returns>
            <remarks>
              The enumerator will enumerate the properties in the order they are
              declared, and when an object has multiple definitions of a single
              property they will all individually be returned (each in the order
              they appear in the content).
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="T:System.Text.Json.JsonProperty">
            <summary>
              Represents a single property for a JSON object.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Value">
            <summary>
              The value of this property.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Name">
            <summary>
              The name of this property.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
            <summary>
              Compares <paramref name="text" /> to the name of this property.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the name of this property matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="T:System.Type"/> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              <see cref="P:System.Text.Json.JsonProperty.Name" />, but can avoid creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
              Compares the text represented by <paramref name="utf8Text" /> to the name of this property.
            </summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>
              <see langword="true" /> if the name of this property has the same UTF-8 encoding as
              <paramref name="utf8Text" />, <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="T:System.Type"/> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="utf8Text" /> and
              <see cref="P:System.Text.Json.JsonProperty.Name" />, but can avoid creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
            <summary>
              Compares <paramref name="text" /> to the name of this property.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the name of this property matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="T:System.Type"/> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              <see cref="P:System.Text.Json.JsonProperty.Name" />, but can avoid creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the property into the provided writer as a named JSON object property.
            </summary>
            <param name="writer">The writer.</param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              This <see cref="P:System.Text.Json.JsonProperty.Name"/>'s length is too large to be a JSON object property.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              This <see cref="P:System.Text.Json.JsonProperty.Value"/>'s <see cref="P:System.Text.Json.JsonElement.ValueKind"/> would result in an invalid JSON.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>>
        </member>
        <member name="M:System.Text.Json.JsonProperty.ToString">
            <summary>
              Provides a <see cref="T:System.String"/> representation of the property for
              debugging purposes.
            </summary>
            <returns>
              A string containing the un-interpreted value of the property, beginning
              at the declaring open-quote and ending at the last character that is part of
              the value.
            </returns>
        </member>
        <member name="T:System.Text.Json.JsonValueKind">
            <summary>
              Specifies the data type of a JSON value.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Undefined">
            <summary>
              Indicates that there is no value (as distinct from <see cref="F:System.Text.Json.JsonValueKind.Null"/>).
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Object">
            <summary>
              Indicates that a value is a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Array">
            <summary>
              Indicates that a value is a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.String">
            <summary>
              Indicates that a value is a JSON string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Number">
            <summary>
              Indicates that a value is a JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.True">
            <summary>
              Indicates that a value is the JSON value <c>true</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.False">
            <summary>
              Indicates that a value is the JSON value <c>false</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Null">
            <summary>
              Indicates that a value is the JSON value <c>null</c>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonCommentHandling">
            <summary>
            This enum defines the various ways the <see cref="T:System.Text.Json.Utf8JsonReader"/> can deal with comments.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
            <summary>
            By default, do no allow comments within the JSON input.
            Comments are treated as invalid JSON if found and a
            <see cref="T:System.Text.Json.JsonException"/> is thrown.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Skip">
            <summary>
            Allow comments within the JSON input and ignore them.
            The <see cref="T:System.Text.Json.Utf8JsonReader"/> will behave as if no comments were present.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Allow">
            <summary>
            Allow comments within the JSON input and treat them as valid tokens.
            While reading, the caller will be able to access the comment values.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonEncodedText">
            <summary>
            Provides a way to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.
            </summary>
            <remarks>
            This can be used to cache and store known strings used for writing JSON ahead of time by pre-encoding them up front.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
            <summary>
            Returns the UTF-8 encoded representation of the pre-encoded JSON text.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Encodes the string text value as a JSON string.
            </summary>
            <param name="value">The value to be transformed as JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large or if it contains invalid UTF-16 characters.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Encodes the text value as a JSON string.
            </summary>
            <param name="value">The value to be transformed as JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large or if it contains invalid UTF-16 characters.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Encodes the UTF-8 text value as a JSON string.
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be transformed as JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large or if it contains invalid UTF-8 bytes.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
            <summary>
            Determines whether this instance and another specified <see cref="T:System.Text.Json.JsonEncodedText"/> instance have the same value.
            </summary>
            <remarks>
            Default instances of <see cref="T:System.Text.Json.JsonEncodedText"/> are treated as equal.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a <see cref="T:System.Text.Json.JsonEncodedText"/> instance, have the same value.
            </summary>
            <remarks>
            If <paramref name="obj"/> is null, the method returns false.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.ToString">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/>.
            </summary>
            <remarks>
            Returns an empty string on a default instance of <see cref="T:System.Text.Json.JsonEncodedText"/>.
            </remarks>
            <returns>
            Returns the underlying UTF-16 encoded string.
            </returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:System.Text.Json.JsonEncodedText"/>.
            </summary>
            <remarks>
            Returns 0 on a default instance of <see cref="T:System.Text.Json.JsonEncodedText"/>.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonException">
            <summary>
            Defines a custom exception object that is thrown when invalid JSON text is encountered, when the defined maximum depth is passed,
            or the JSON text is not compatible with the type of a property on an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="lineNumber">The line number at which the invalid JSON was encountered (starting at 0) when deserializing.</param>
            <param name="bytePositionInLine">The byte count within the current line where the invalid JSON was encountered (starting at 0).</param>
            <param name="path">The path where the invalid JSON was encountered.</param>
            <param name="innerException">The exception that caused the current exception.</param>
            <remarks>
            Note that the <paramref name="bytePositionInLine"/> counts the number of bytes (i.e. UTF-8 code units) and not characters or scalars.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="path">The path where the invalid JSON was encountered.</param>
            <param name="lineNumber">The line number at which the invalid JSON was encountered (starting at 0) when deserializing.</param>
            <param name="bytePositionInLine">The byte count within the current line where the invalid JSON was encountered (starting at 0).</param>
            <remarks>
            Note that the <paramref name="bytePositionInLine"/> counts the number of bytes (i.e. UTF-8 code units) and not characters or scalars.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="innerException">The exception that caused the current exception.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new exception object with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="info"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonException.AppendPathInformation">
            <summary>
            Specifies that 'try' logic should append Path information to the exception message.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Text.Json.JsonException.LineNumber">
            <summary>
            The number of lines read so far before the exception (starting at 0).
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonException.BytePositionInLine">
            <summary>
            The number of bytes read within the current line before the exception (starting at 0).
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonException.Path">
            <summary>
            The path within the JSON where the exception was encountered.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.GetSpan(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Returns the span for the given reader.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Text.Json.JsonTokenType,System.Text.Json.JsonTokenType,System.Text.Json.JsonTokenType)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsDigit(System.Byte)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is in the range [0..9].
            Otherwise, returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.ReadWithVerify(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Perform a Read() with a Debug.Assert verifying the reader did not return false.
            This should be called when the Read() return value is not used, such as non-Stream cases where there is only one buffer.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.Utf8GetString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Calls Encoding.UTF8.GetString that supports netstandard.
            </summary>
            <param name="bytes">The utf8 bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0@,``1@)">
            <summary>
            Emulates Dictionary.TryAdd on netstandard.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryParseAsISO(System.ReadOnlySpan{System.Byte},System.DateTime@)">
            <summary>
            Parse the given UTF-8 <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">UTF-8 source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateTime"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryParseAsISO(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@)">
            <summary>
            Parse the given UTF-8 <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">UTF-8 source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateTimeOffset"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryParseDateTimeOffset(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonHelpers.DateTimeParseData@)">
             <summary>
             ISO 8601 date time parser (ISO 8601-1:2019).
             </summary>
             <param name="source">The date/time to parse in UTF-8 format.</param>
             <param name="parseData">The parsed <see cref="T:System.Text.Json.JsonHelpers.DateTimeParseData"/> for the given <paramref name="source"/>.</param>
             <remarks>
             Supports extended calendar date (5.2.2.1) and complete (5.4.2.1) calendar date/time of day
             representations with optional specification of seconds and fractional seconds.
            
             Times can be explicitly specified as UTC ("Z" - 5.3.3) or offsets from UTC ("+/-hh:mm" 5.3.4.2).
             If unspecified they are considered to be local per spec.
            
             Examples: (TZD is either "Z" or hh:mm offset from UTC)
            
              YYYY-MM-DD               (eg 1997-07-16)
              YYYY-MM-DDThh:mm         (eg 1997-07-16T19:20)
              YYYY-MM-DDThh:mm:ss      (eg 1997-07-16T19:20:30)
              YYYY-MM-DDThh:mm:ss.s    (eg 1997-07-16T19:20:30.45)
              YYYY-MM-DDThh:mmTZD      (eg 1997-07-16T19:20+01:00)
              YYYY-MM-DDThh:mm:ssTZD   (eg 1997-07-16T19:20:3001:00)
              YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45Z)
            
             Generally speaking we always require the "extended" option when one exists (3.1.3.5).
             The extended variants have separator characters between components ('-', ':', '.', etc.).
             Spaces are not permitted.
             </remarks>
             <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffset(System.DateTime,System.Text.Json.JsonHelpers.DateTimeParseData@,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffset(System.Text.Json.JsonHelpers.DateTimeParseData@,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffsetInterpretingDataAsLocalTime(System.Text.Json.JsonHelpers.DateTimeParseData,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset/Local time conversion factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTime(System.Text.Json.JsonHelpers.DateTimeParseData,System.DateTimeKind,System.DateTime@)">
            <summary>
            Overflow-safe DateTime factory.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonTokenType">
            <summary>
            This enum defines the various JSON tokens that make up a JSON text and is used by
            the <see cref="T:System.Text.Json.Utf8JsonReader"/> when moving from one token to the next.
            The <see cref="T:System.Text.Json.Utf8JsonReader"/> starts at 'None' by default. The 'Comment' enum value
            is only ever reached in a specific <see cref="T:System.Text.Json.Utf8JsonReader"/> mode and is not
            reachable by default.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.None">
            <summary>
              Indicates that there is no value (as distinct from <see cref="F:System.Text.Json.JsonTokenType.Null"/>).
            </summary>
            <remarks>
              This is the default token type if no data has been read by the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </remarks>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.StartObject">
            <summary>
              Indicates that the token type is the start of a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.EndObject">
            <summary>
              Indicates that the token type is the end of a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.StartArray">
            <summary>
              Indicates that the token type is the start of a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.EndArray">
            <summary>
              Indicates that the token type is the end of a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.PropertyName">
            <summary>
              Indicates that the token type is a JSON property name.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Comment">
            <summary>
              Indicates that the token type is the comment string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.String">
            <summary>
              Indicates that the token type is a JSON string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Number">
            <summary>
              Indicates that the token type is a JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.True">
            <summary>
              Indicates that the token type is the JSON literal <c>true</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.False">
            <summary>
              Indicates that the token type is the JSON literal <c>false</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Null">
            <summary>
              Indicates that the token type is the JSON literal <c>null</c>.
            </summary>
        </member>
        <member name="T:System.Text.Json.ConsumeNumberResult">
            <summary>
            This enum captures the tri-state return value when trying to read a
            JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.Success">
            <summary>
            Reached a valid end of number and hence no action is required.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.OperationIncomplete">
            <summary>
            Successfully processed a portion of the number and need to
            read to the next region of the number.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.NeedMoreData">
            <summary>
            Observed incomplete data.
            Return false if we have more data to follow. Otherwise throw.
            </summary>
        </member>
        <member name="T:System.Text.Json.ConsumeTokenResult">
            <summary>
            This enum captures the tri-state return value when trying to read the
            next JSON token.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.Success">
            <summary>
            Reached a valid end of token and hence no action is required.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.NotEnoughDataRollBackState">
            <summary>
            Observed incomplete data but progressed state partially in looking ahead.
            Return false and roll-back to a previously saved state.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.IncompleteNoRollBackNecessary">
            <summary>
            Observed incomplete data but no change was made to the state.
            Return false, but do not roll-back anything since nothing changed.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonReaderOptions">
            <summary>
            Provides the ability for the user to define custom behavior when reading JSON.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
            <summary>
            Defines how the <see cref="T:System.Text.Json.Utf8JsonReader"/> should handle comments when reading through the JSON.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the comment handling enum is set to a value that is not supported (i.e. not within the <see cref="T:System.Text.Json.JsonCommentHandling"/> enum range).
            </exception>
            <remarks>
            By default <exception cref="T:System.Text.Json.JsonException"/> is thrown if a comment is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON, with the default (i.e. 0) indicating a max depth of 64.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being read.
            </summary>
            <remarks>
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonException"/> is thrown if a trailing comma is encountered.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonReaderState">
            <summary>
            Defines an opaque type that holds and saves all the relevant state information which must be provided
            to the <see cref="T:System.Text.Json.Utf8JsonReader"/> to continue reading after processing incomplete data.
            This type is required to support reentrancy when reading incomplete data, and to continue
            reading once more data is available. Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct,
            this type can survive across async/await boundaries and hence this type is required to provide
            support for reading in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonReaderState"/> instance.
            </summary>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <remarks>
            An instance of this state must be passed to the <see cref="T:System.Text.Json.Utf8JsonReader"/> ctor with the JSON data.
            Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct, the state can survive
            across async/await boundaries and hence this type is required to provide support for reading
            in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderState.Options">
            <summary>
            Gets the custom behavior when reading JSON using
            the <see cref="T:System.Text.Json.Utf8JsonReader"/> that may deviate from strict adherence
            to the JSON specification, which is the default behavior.
            </summary>
        </member>
        <member name="T:System.Text.Json.Utf8JsonReader">
            <summary>
            Provides a high-performance API for forward-only, read-only access to the UTF-8 encoded JSON text.
            It processes the text sequentially with no caching and adheres strictly to the JSON RFC
            by default (https://tools.ietf.org/html/rfc8259). When it encounters invalid JSON, it throws
            a JsonException with basic error information like line number and byte position on the line.
            Since this type is a ref struct, it does not directly support async. However, it does provide
            support for reentrancy to read incomplete data, and continue reading once more data is presented.
            To be able to set max depth while reading OR allow skipping comments, create an instance of
            <see cref="T:System.Text.Json.JsonReaderState"/> and pass that in to the reader.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
            <summary>
            Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice
            of the input payload. If the JSON is provided within a ReadOnlySequence&lt;byte&gt;
            and the slice that represents the token value fits in a single segment, then
            <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> will contain the sliced value since it can be represented as a span.
            Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> will contain the token value.
            </summary>
            <remarks>
            If <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is true, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> contains useless data, likely for
            a previous single-segment token. Therefore, only access <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> if <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is false.
            Otherwise, the token value must be accessed from <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
            <summary>
            Returns the total amount of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader"/> so far
            for the current instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> with the given UTF-8 encoded input text.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
            <summary>
            Returns the index that the last processed JSON token starts at
            within the given UTF-8 encoded input text, skipping any white space.
            </summary>
            <remarks>
            For JSON strings (including property names), this points to before the start quote.
            For comments, this points to before the first comment delimiter (i.e. '/').
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
            <summary>
            Tracks the recursive depth of the nested objects / arrays within the JSON text
            processed so far. This provides the depth of the current token.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
            <summary>
            Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
            <summary>
            Lets the caller know which of the two 'Value' properties to read to get the
            token value. For input data within a ReadOnlySpan&lt;byte&gt; this will
            always return false. For input data within a ReadOnlySequence&lt;byte&gt;, this
            will only return true if the token value straddles more than a single segment and
            hence couldn't be represented as a span.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
            <summary>
            Returns the mode of this instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            True when the reader was constructed with the input span containing the entire data to process.
            False when the reader was constructed knowing that the input span may contain partial data with more data to follow.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
            <summary>
            Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice
            of the input payload. If the JSON is provided within a ReadOnlySequence&lt;byte&gt;
            and the slice that represents the token value fits in a single segment, then
            <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> will contain the sliced value since it can be represented as a span.
            Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> will contain the token value.
            </summary>
            <remarks>
            If <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is false, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> contains useless data, likely for
            a previous multi-segment token. Therefore, only access <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> if <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is true.
            Otherwise, the token value must be accessed from <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.Position">
            <summary>
            Returns the current <see cref="T:System.SequencePosition"/> within the provided UTF-8 encoded
            input ReadOnlySequence&lt;byte&gt;. If the <see cref="T:System.Text.Json.Utf8JsonReader"/> was constructed
            with a ReadOnlySpan&lt;byte&gt; instead, this will always return a default <see cref="T:System.SequencePosition"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
            <summary>
            Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonReader"/> state which must
            be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonReader"/> ctor with more data.
            Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct, the state can survive
            across async/await boundaries and hence this type is required to provide support for reading
            in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySpan&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">True when the input span contains the entire data to process.
            Set to false only if it is known that the input span contains partial data with more data to follow.</param>
            <param name="state">If this is the first call to the ctor, pass in a default state. Otherwise,
            capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> and pass that back.</param>
            <remarks>
            Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
            This is the reason why the ctor accepts a <see cref="T:System.Text.Json.JsonReaderState"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySpan&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <remarks>
              <para>
                Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
              </para>
              <para>
                This assumes that the entire JSON payload is passed in (equivalent to <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock"/> = true)
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Read">
            <summary>
            Read the next JSON token from input source.
            </summary>
            <returns>True if the token was read successfully, else false.</returns>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when an invalid JSON token is encountered according to the JSON RFC
            or if the current depth exceeds the recursive limit set by the max depth.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Skip">
             <summary>
             Skips the children of the current JSON token.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Thrown when the reader was given partial data with more data to follow (i.e. <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock"/> is false).
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown when an invalid JSON token is encountered while skipping, according to the JSON RFC,
             or if the current depth exceeds the recursive limit set by the max depth.
             </exception>
             <remarks>
             When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> is <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, the reader first moves to the property value.
             When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> (originally, or after advancing) is <see cref="F:System.Text.Json.JsonTokenType.StartObject" /> or
             <see cref="F:System.Text.Json.JsonTokenType.StartArray" />, the reader advances to the matching
             <see cref="F:System.Text.Json.JsonTokenType.EndObject" /> or <see cref="F:System.Text.Json.JsonTokenType.EndArray" />.
            
             For all other token types, the reader does not move. After the next call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/>, the reader will be at
             the next value (when in an array), the next property name (when in an object), or the end array/object token.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
             <summary>
             Tries to skip the children of the current JSON token.
             </summary>
             <returns>True if there was enough data for the children to be skipped successfully, else false.</returns>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown when an invalid JSON token is encountered while skipping, according to the JSON RFC,
             or if the current depth exceeds the recursive limit set by the max depth.
             </exception>
             <remarks>
               <para>
                 If the reader did not have enough data to completely skip the children of the current token,
                 it will be reset to the state it was in before the method was called.
               </para>
               <para>
                 When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> is <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, the reader first moves to the property value.
                 When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> (originally, or after advancing) is <see cref="F:System.Text.Json.JsonTokenType.StartObject" /> or
                 <see cref="F:System.Text.Json.JsonTokenType.StartArray" />, the reader advances to the matching
                 <see cref="F:System.Text.Json.JsonTokenType.EndObject" /> or <see cref="F:System.Text.Json.JsonTokenType.EndArray" />.
            
                 For all other token types, the reader does not move. After the next call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/>, the reader will be at
                 the next value (when in an array), the next property name (when in an object), or the end array/object token.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares the UTF-8 encoded text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>True if the JSON token value in the source matches the UTF-8 encoded look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
              <para>
                If the look up text is invalid UTF-8 text, the method will return false since you cannot have
                invalid UTF-8 within the JSON payload.
              </para>
              <para>
                The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
                if required. The look up text is matched as is, without any modifications to it.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
            <summary>
            Compares the string text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>True if the JSON token value in the source matches the look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
              <para>
                If the look up text is invalid UTF-8 text, the method will return false since you cannot have
                invalid UTF-8 within the JSON payload.
              </para>
              <para>
                The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
                if required. The look up text is matched as is, without any modifications to it.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>True if the JSON token value in the source matches the look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
              <para>
                If the look up text is invalid or incomplete UTF-16 text (i.e. unpaired surrogates), the method will return false
                since you cannot have invalid UTF-16 within the JSON payload.
              </para>
              <para>
                The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
                if required. The look up text is matched as is, without any modifications to it.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeValue(System.Byte)">
            <summary>
            This method contains the logic for processing the next value token and determining
            what type of data it is.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeNextToken(System.Byte)">
            <summary>
            This method consumes the next token regardless of whether we are inside an object or an array.
            For an object, it reads the next property name token. For an array, it just reads the next value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySequence&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">True when the input span contains the entire data to process.
            Set to false only if it is known that the input span contains partial data with more data to follow.</param>
            <param name="state">If this is the first call to the ctor, pass in a default state. Otherwise,
            capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> and pass that back.</param>
            <remarks>
            Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
            This is the reason why the ctor accepts a <see cref="T:System.Text.Json.JsonReaderState"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySequence&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <remarks>
              <para>
                Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
              </para>
              <para>
                This assumes that the entire JSON payload is passed in (equivalent to <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock"/> = true)
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeValueMultiSegment(System.Byte)">
            <summary>
            This method contains the logic for processing the next value token and determining
            what type of data it is.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeNextTokenMultiSegment(System.Byte)">
            <summary>
            This method consumes the next token regardless of whether we are inside an object or an array.
            For an object, it reads the next property name token. For an array, it just reads the next value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetString">
            <summary>
            Parses the current JSON token value from the source, unescaped, and transcoded as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
            Returns <see langword="null" /> when <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> is <see cref="F:System.Text.Json.JsonTokenType.Null"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of the JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/>, <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or
            <see cref="F:System.Text.Json.JsonTokenType.Null"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            It will also throw when the JSON string contains invalid UTF-8 bytes, or invalid UTF-16 surrogates.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
            <summary>
            Parses the current JSON token value from the source as a comment, transcoded as a <see cref="T:System.String"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of the JSON token that is not a comment.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Boolean"/>.
            Returns <see langword="true"/> if the TokenType is JsonTokenType.True and <see langword="false"/> if the TokenType is JsonTokenType.False.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a boolean (i.e. <see cref="F:System.Text.Json.JsonTokenType.True"/> or <see cref="F:System.Text.Json.JsonTokenType.False"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
            <summary>
            Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown when the JSON string contains data outside of the expected Base64 range, or if it contains invalid/more than two padding characters,
            or is incomplete (i.e. the JSON string length is not a multiple of 4).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Byte"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Byte"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Byte.MinValue"/> or greater
            than <see cref="F:System.Byte.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.SByte"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.SByte"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.SByte.MinValue"/> or greater
            than <see cref="F:System.SByte.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int16"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int16"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int16.MinValue"/> or greater
            than <see cref="F:System.Int16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.Int32"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int32.MinValue"/> or greater
            than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int64"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int64"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int64.MinValue"/> or greater
            than <see cref="F:System.Int64.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt16"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt16"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt16.MinValue"/> or greater
            than <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt32"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt32.MinValue"/> or greater
            than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt64"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt64.MinValue"/> or greater
            than <see cref="F:System.UInt64.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Single"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Single"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            On any framework that is not .NET Core 3.0 or higher, thrown if the JSON token value represents a number less than <see cref="F:System.Single.MinValue"/> or greater
            than <see cref="F:System.Single.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Double"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            On any framework that is not .NET Core 3.0 or higher, thrown if the JSON token value represents a number less than <see cref="F:System.Double.MinValue"/> or greater
            than <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Decimal"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value represents a number less than <see cref="F:System.Decimal.MinValue"/> or greater
            than <see cref="F:System.Decimal.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTime"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format. Only a subset of ISO 8601 formats are supported.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTimeOffset"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format. Only a subset of ISO 8601 formats are supported.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Guid"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format for a Guid.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>
            Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as bytes.
            Returns <see langword="true"/> if the entire token value is encoded as valid Base64 text and can be successfully
            decoded to bytes.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Byte"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Byte"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.SByte"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to an <see cref="T:System.SByte"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int16"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Int16"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.Int32"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to an <see cref="T:System.Int32"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int64"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Int64"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt16"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.UInt16"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt32"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.UInt32"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt64"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.UInt64"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Single"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Single"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Double"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Double"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Decimal"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Decimal"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTime"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.DateTime"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTimeOffset"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.DateTimeOffset"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Guid"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Guid"/> value. Only supports <see cref="T:System.Guid"/> values with hyphens
            and without any surrounding decorations.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="T:System.Text.Json.Arguments`4">
            <summary>
            Constructor arguments for objects with parameterized ctors with less than 5 parameters.
            This is to avoid boxing for small, immutable objects.
            </summary>
        </member>
        <member name="T:System.Text.Json.ArgumentState">
            <summary>
            Holds relevant state when deserializing objects with parameterized constructors.
            Lives on the current ReadStackFrame.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonAttribute">
            <summary>
            The base class of serialization attributes.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
            <summary>
            When placed on a constructor, indicates that the constructor should be used to create
            instances of the type on deserialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
            <summary>
            When placed on a property, field, or type, specifies the converter type to use.
            </summary>
            <remarks>
            The specified converter type must derive from <see cref="T:System.Text.Json.Serialization.JsonConverter"/>.
            When placed on a property or field, the specified converter will always be used.
            When placed on a type, the specified converter will be used unless a compatible converter is added to
            <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/> or there is another <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> on a property or field
            of the same type.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> with the specified converter type.
            </summary>
            <param name="converterType">The type of the converter.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
            <summary>
            The type of the converter to create, or null if <see cref="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)"/> should be used to obtain the converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
            <summary>
            If overridden and <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType"/> is null, allows a custom attribute to create the converter in order to pass additional state.
            </summary>
            <returns>
            The custom converter.
            </returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
             <summary>
             When placed on a property or field of type <see cref="T:System.Collections.Generic.IDictionary`2"/>, any
             properties that do not have a matching property or field are added to that Dictionary during deserialization and written during serialization.
             </summary>
             <remarks>
             The TKey value must be <see cref="T:System.String"/> and TValue must be <see cref="T:System.Text.Json.JsonElement"/> or <see cref="T:System.Object"/>.
            
             During deserializing, when using <see cref="T:System.Object"/> a "null" JSON value is treated as a <c>null</c> object reference, and when using
             <see cref="T:System.Text.Json.JsonElement"/> a "null" is treated as a JsonElement with <see cref="P:System.Text.Json.JsonElement.ValueKind"/> set to <see cref="F:System.Text.Json.JsonValueKind.Null"/>.
            
             During serializing, the name of the extension data member is not included in the JSON;
             the data contained within the extension data is serialized as properties of the JSON object.
            
             If there is more than one extension member on a type, or the member is not of the correct type,
             an <see cref="T:System.InvalidOperationException"/> is thrown during the first serialization or deserialization of that type.
             </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
            <summary>
            Prevents a property or field from being serialized or deserialized.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
            <summary>
            Specifies the condition that must be met before a property or field will be ignored.
            </summary>
            <remarks>The default value is <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always"/>.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
             <summary>
             Indicates that the property or field should be included for serialization and deserialization.
             </summary>
             <remarks>
             When applied to a public property, indicates that non-public getters and setters should be used for serialization and deserialization.
            
             Non-public properties and fields are not allowed when serializing and deserializing. If the attribute is used on a non-public property or field,
             an <see cref="T:System.InvalidOperationException"/> is thrown during the first serialization or deserialization of the declaring type.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
            <summary>
            When placed on a type, property, or field, indicates what <see cref="T:System.Text.Json.Serialization.JsonNumberHandling"/>
            settings should be used when serializing or deserializing numbers.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
            <summary>
            Indicates what settings should be used when serializing or deserializing numbers.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
            <summary>
            Specifies the property name that is present in the JSON when serializing and deserializing.
            This overrides any naming policy specified by <see cref="T:System.Text.Json.JsonNamingPolicy"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> with the specified property name.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ConverterList">
            <summary>
            A list of JsonConverters that respects the options class being immuttable once (de)serialization occurs.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ArrayConverter`2">
            <summary>
            Converter for <cref>System.Array</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.DictionaryDefaultConverter`3">
            <summary>
            Default base class implementation of <cref>JsonDictionaryConverter{TCollection}</cref> .
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.DictionaryDefaultConverter`3.Add(`1,`2@,System.Text.Json.JsonSerializerOptions,System.Text.Json.ReadStack@)">
            <summary>
            When overridden, adds the value to the collection.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.DictionaryDefaultConverter`3.ConvertCollection(System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            When overridden, converts the temporary collection held in state.Current.ReturnValue to the final collection.
            This is used with immutable collections.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.DictionaryDefaultConverter`3.CreateCollection(System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@)">
            <summary>
            When overridden, create the collection. It may be a temporary collection or the final collection.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.DictionaryOfTKeyTValueConverter`3">
            <summary>
            Converter for Dictionary{string, TValue} that (de)serializes as a JSON object with properties
            representing the dictionary element key and value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ICollectionOfTConverter`2">
            <summary>
            Converter for <cref>System.Collections.Generic.ICollection{TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IDictionaryConverter`1">
            <summary>
            Converter for <cref>System.Collections.IDictionary</cref> that (de)serializes as a JSON object with properties
            representing the dictionary element key and value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3">
            <summary>
            Converter for <cref>System.Collections.Generic.IDictionary{TKey, TValue}</cref> that
            (de)serializes as a JSON object with properties representing the dictionary element key and value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableConverter`1">
            <summary>
            Converter for <cref>System.Collections.IEnumerable</cref>.
            </summary>
            <typeparam name="TCollection"></typeparam>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableConverterFactory">
            <summary>
            Converter factory for all IEnumerable types.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2">
            <summary>
            Default base class implementation of <cref>JsonIEnumerableConverter{TCollection, TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableOfTConverter`2">
            <summary>
            Converter for <cref>System.Collections.Generic.IEnumerable{TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IListConverter`1">
            Converter for <cref>System.Collections.IList</cref>.
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IListOfTConverter`2">
            <summary>
            Converter for <cref>System.Collections.Generic.IList{TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ListOfTConverter`2">
            Converter for <cref>System.Collections.Generic.List{TElement}</cref>.
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.KeyValuePairConverter`2.TryLookupConstructorParameter(System.Text.Json.ReadStack@,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonParameterInfo@)">
            <summary>
            Lookup the constructor parameter given its name in the reader.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ObjectConverterFactory">
            <summary>
            Converter factory for all object-based types (non-enumerable and non-primitive).
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1">
            <summary>
            Default base class implementation of <cref>JsonObjectConverter{T}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.ReadConstructorArguments(System.Text.Json.ReadStack@,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Performs a full first pass of the JSON input and deserializes the ctor args.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.TryLookupConstructorParameter(System.Text.Json.ReadStack@,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonParameterInfo@)">
            <summary>
            Lookup the constructor parameter given its name in the reader.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.LargeObjectWithParameterizedConstructorConverter`1">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Converters.EnumConverterOptions.AllowStrings">
            <summary>
            Allow string values.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Converters.EnumConverterOptions.AllowNumbers">
            <summary>
            Allow number values.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonCollectionConverter`2">
            <summary>
            Base class for all collections. Collections are assumed to implement <cref>System.Collections.IEnumerable</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonDictionaryConverter`1">
            <summary>
            Base class for dictionary converters such as IDictionary, Hashtable, Dictionary{,} IDictionary{,} and SortedList.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonObjectConverter`1">
            <summary>
            Base class for non-enumerable, non-primitive objects where public properties
            are (de)serialized as a JSON object.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverter">
            <summary>
            Converts an object or value to or from JSON.
            </summary>
            <summary>
            Converts an object or value to or from JSON.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the type can be converted.
            </summary>
            <param name="typeToConvert">The type is checked as to whether it can be converted.</param>
            <returns>True if the type can be converted, false otherwise.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.CanUseDirectReadOrWrite">
            <summary>
            Can direct Read or Write methods be called (for performance).
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.CanHaveIdMetadata">
            <summary>
            Can the converter have $id metadata.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.IsValueType">
            <summary>
            Cached value of TypeToConvert.IsValueType, which is an expensive call.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.IsInternalConverter">
            <summary>
            Whether the converter is built-in.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonConverter.IsInternalConverterForNumberType">
            <summary>
            Whether the converter is built-in and handles a number type.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ReadCoreAsObject(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions,System.Text.Json.ReadStack@)">
            <summary>
            Loosely-typed ReadCore() that forwards to strongly-typed ReadCore().
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.WriteCoreAsObject(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions,System.Text.Json.WriteStack@)">
            <summary>
            Loosely-typed WriteCore() that forwards to strongly-typed WriteCore().
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.WriteWithQuotesAsObject(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions,System.Text.Json.WriteStack@)">
            <summary>
            Loosely-typed WriteWithQuotes() that forwards to strongly-typed WriteWithQuotes().
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.CreateInstanceForReferenceResolver(System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates the instance and assigns it to state.Current.ReturnValue.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.SingleValueReadWithReadAhead(System.Text.Json.ClassType,System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@)">
            <summary>
            Perform a Read() and if read-ahead is required, also read-ahead (to the end of the current JSON level).
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
            <summary>
            Supports converting several types by using a factory pattern.
            </summary>
            <remarks>
            This is useful for converters supporting generics, such as a converter for <see cref="T:System.Collections.Generic.List`1"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
            <summary>
            When overidden, constructs a new <see cref="T:System.Text.Json.Serialization.JsonConverterFactory"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create a converter for the provided <see cref="T:System.Type"/>.
            </summary>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
            <returns>
            An instance of a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> where T is compatible with <paramref name="typeToConvert"/>.
            If <see langword="null"/> is returned, a <see cref="T:System.NotSupportedException"/> will be thrown.
            </returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverter`1">
            <summary>
            Converts an object or value to or from JSON.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to convert.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
            <summary>
            When overidden, constructs a new <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether the type can be converted.
            </summary>
            <remarks>
            The default implementation is to return True when <paramref name="typeToConvert"/> equals typeof(T).
            </remarks>
            <param name="typeToConvert"></param>
            <returns>True if the type can be converted, False otherwise.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
            <summary>
            Indicates whether <see langword="null"/> should be passed to the converter on serialization,
            and whether <see cref="F:System.Text.Json.JsonTokenType.Null"/> should be passed on deserialization.
            </summary>
            <remarks>
            The default value is <see langword="true"/> for converters for value types, and <see langword="false"/> for converters for reference types.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNullOnRead">
            <summary>
            Does the converter want to be called when reading null tokens.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNullOnWrite">
            <summary>
            Does the converter want to be called for null values.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.CanBeNull">
            <summary>
            Can <see langword="null"/> be assigned to <see cref="P:System.Text.Json.Serialization.JsonConverter`1.TypeToConvert"/>?
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read and convert the JSON to T.
            </summary>
            <remarks>
            A converter may throw any Exception, but should throw <cref>JsonException</cref> when the JSON is invalid.
            </remarks>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader"/> to read from.</param>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
            <returns>The value that was converted.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the value as JSON.
            </summary>
            <remarks>
            A converter may throw any Exception, but should throw <cref>JsonException</cref> when the JSON
            cannot be created.
            </remarks>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
            <summary>
            When specified on <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition"/>,
            determines when properties and fields across the type graph are ignored.
            When specified on <see cref="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition"/>, controls whether
            a property is ignored during serialization and deserialization. This option
            overrides the setting on <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition"/>.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
            <summary>
            Property is never ignored during serialization or deserialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
            <summary>
            Property is always ignored during serialization and deserialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
            <summary>
            If the value is the default, the property is ignored during serialization.
            This is applied to both reference and value-type properties and fields.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
            <summary>
            If the value is <see langword="null"/>, the property is ignored during serialization.
            This is applied only to reference-type properties and fields.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
            <summary>
            Determines how <see cref="T:System.Text.Json.JsonSerializer"/> handles numbers when serializing and deserializing.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
            <summary>
            Numbers will only be read from <see cref="F:System.Text.Json.JsonTokenType.Number"/> tokens and will only be written as JSON numbers (without quotes).
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
            <summary>
            Numbers can be read from <see cref="F:System.Text.Json.JsonTokenType.String"/> tokens.
            Does not prevent numbers from being read from <see cref="F:System.Text.Json.JsonTokenType.Number"/> token.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
            <summary>
            Numbers will be written as JSON strings (with quotes), not as JSON numbers.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
            <summary>
            The "NaN", "Infinity", and "-Infinity" <see cref="F:System.Text.Json.JsonTokenType.String"/> tokens can be read as
            floating-point constants, and the <see cref="T:System.Single"/> and <see cref="T:System.Double"/> values for these
            constants will be written as their corresponding JSON string representations.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonResumableConverter`1">
            <summary>
            Base class for converters that are able to resume after reading or writing to a buffer.
            This is used when the Stream-based serialization APIs are used.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
            <summary>
            Converter to convert enums to and from strings.
            </summary>
            <remarks>
            Reading is case insensitive, writing can be customized via a <see cref="T:System.Text.Json.JsonNamingPolicy" />.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
            <summary>
            Constructor. Creates the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter"/> with the
            default naming policy and allows integer values.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="namingPolicy">
            Optional naming policy for writing enum values.
            </param>
            <param name="allowIntegerValues">
            True to allow undefined enum values. When true, if an enum value isn't
            defined it will output as a number rather than a string.
            </param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.Json.Serialization.PreserveReferenceResolver">
            <summary>
            The default ReferenceResolver implementation to handle duplicate object references.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceHandler">
            <summary>
            This class defines how the <see cref="T:System.Text.Json.JsonSerializer"/> deals with references on serialization and deserialization.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
            <summary>
            Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.
            </summary>
            <remarks>
            * On Serialize:
            When writing complex reference types, the serializer also writes metadata properties (`$id`, `$values`, and `$ref`) within them.
            The output JSON will contain an extra `$id` property for every object, and for every enumerable type the JSON array emitted will be nested within a JSON object containing an `$id` and `$values` property.
            <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> is used to determine whether objects are identical.
            When an object is identical to a previously serialized one, a pointer (`$ref`) to the identifier (`$id`) of such object is written instead.
            No metadata properties are written for value types.
            * On Deserialize:
            The metadata properties within the JSON that are used to preserve duplicated references and cycles will be honored as long as they are well-formed**.
            For JSON objects that don't contain any metadata properties, the deserialization behavior is identical to <see langword="null"/>.
            For value types:
              * The `$id` metadata property is ignored.
              * A <see cref="T:System.Text.Json.JsonException"/> is thrown if a `$ref` metadata property is found within the JSON object.
              * For enumerable value types, the `$values` metadata property is ignored.
            ** For the metadata properties within the JSON to be considered well-formed, they must follow these rules:
              1) The `$id` metadata property must be the first property in the JSON object.
              2) A JSON object that contains a `$ref` metadata property must not contain any other properties.
              3) The value of the `$ref` metadata property must refer to an `$id` that has appeared earlier in the JSON.
              4) The value of the `$id` and `$ref` metadata properties must be a JSON string.
              5) For enumerable types, such as <see cref="T:System.Collections.Generic.List`1"/>, the JSON array must be nested within a JSON object containing an `$id` and `$values` metadata property, in that order.
              6) For enumerable types, the `$values` metadata property must be a JSON array.
              7) The `$values` metadata property is only valid when referring to enumerable types.
            If the JSON is not well-formed, a <see cref="T:System.Text.Json.JsonException"/> is thrown.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
            <summary>
            Returns the <see cref="T:System.Text.Json.Serialization.ReferenceResolver"/> used for each serialization call.
            </summary>
            <returns>The resolver to use for serialization and deserialization.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver(System.Boolean)">
            <summary>
            Optimization for the resolver used when <see cref="P:System.Text.Json.Serialization.ReferenceHandler.Preserve"/> is set in <see cref="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler"/>;
            we pass a flag signaling whether this is called from serialization or deserialization to save one dictionary instantiation.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
            <summary>
            This class defines how the <see cref="T:System.Text.Json.JsonSerializer"/> deals with references on serialization and deserialization.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Text.Json.Serialization.ReferenceResolver"/> to create on each serialization or deserialization call.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
            <summary>
            Creates a new <see cref="T:System.Text.Json.Serialization.ReferenceResolver"/> of type <typeparamref name="T"/> used for each serialization call.
            </summary>
            <returns>The new resolver to use for serialization and deserialization.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceResolver">
            <summary>
            This class defines how the <see cref="T:System.Text.Json.JsonSerializer"/> deals with references on serialization and deserialization.
            Defines the core behavior of preserving references on serialization and deserialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
            <summary>
            Adds an entry to the bag of references using the specified id and value.
            This method gets called when an $id metadata property from a JSON object is read.
            </summary>
            <param name="referenceId">The identifier of the respective JSON object or array.</param>
            <param name="value">The value of the respective CLR reference type object that results from parsing the JSON object.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
            <summary>
            Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.
            This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.
            </summary>
            <param name="value">The value of the CLR reference type object to get an id for.</param>
            <param name="alreadyExists">When this method returns, <see langword="true"/> if a reference to value already exists; otherwise, <see langword="false"/>.</param>
            <returns>The reference id for the specified object.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
            <summary>
            Returns the CLR reference type object related to the specified reference id.
            This method gets called when $ref metadata property is read.
            </summary>
            <param name="referenceId">The reference id related to the returned object.</param>
            <returns>The reference type object related to specified reference id.</returns>
        </member>
        <member name="T:System.Text.Json.ClassType">
            <summary>
            Determines how a given class is treated when it is (de)serialized.
            </summary>
            <remarks>
            Although bit flags are used, a given ClassType can only be one value.
            Bit flags are used to efficiently compare against more than one value.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonClassInfo.ElementClassInfo">
            <summary>
            Return the JsonClassInfo for the element type, or null if the type is not an enumerable or dictionary.
            </summary>
            <remarks>
            This should not be called during warm-up (initial creation of JsonClassInfos) to avoid recursive behavior
            which could result in a StackOverflowException.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo">
            <summary>
            The JsonPropertyInfo for this JsonClassInfo. It is used to obtain the converter for the ClassInfo.
            </summary>
            <remarks>
            The returned JsonPropertyInfo does not represent a real property; instead it represents either:
            a collection element type,
            a generic type parameter,
            a property type (if pushed to a new stack frame),
            or the root type passed into the root serialization APIs.
            For example, for a property returning <see cref="T:System.Collections.Generic.List`1"/> where T is a string,
            a JsonClassInfo will be created with .Type=typeof(string) and .PropertyInfoForClassInfo=JsonPropertyInfo{string}.
            Without this property, a "Converter" property would need to be added to JsonClassInfo and there would be several more
            `if` statements to obtain the converter from either the actual JsonPropertyInfo (for a real property) or from the
            ClassInfo (for the cases mentioned above). In addition, methods that have a JsonPropertyInfo argument would also likely
            need to add an argument for JsonClassInfo.
            </remarks>
        </member>
        <member name="F:System.Text.Json.JsonClassInfo.ObjectType">
            <summary>
            Cached typeof(object). It is faster to cache this than to call typeof(object) multiple times.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonClassInfo.CreatePropertyInfoForClassInfo(System.Type,System.Type,System.Text.Json.Serialization.JsonConverter,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create a <see cref="T:System.Text.Json.JsonPropertyInfo"/> for a given Type.
            See <seealso cref="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonClassInfo.GetKey(System.ReadOnlySpan{System.Byte})">
            <summary>
            Get a key from the property name.
            The key consists of the first 7 bytes of the property name and then the length.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonNamingPolicy">
            <summary>
            Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.JsonNamingPolicy"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
            <summary>
            Returns the naming policy for camel-casing.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
            <summary>
            When overridden in a derived class, converts the specified name according to the policy.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The converted name.</returns>
        </member>
        <member name="T:System.Text.Json.JsonParameterInfo">
            <summary>
            Holds relevant state about a method parameter, like the default value of
            the parameter, and the position in the method's parameter list.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonParameterInfo`1">
            <summary>
            Represents a strongly-typed parameter to prevent boxing where have less than 4 parameters.
            Holds relevant state like the default value of the parameter, and the position in the method's parameter list.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonPropertyInfo.IsForClassInfo">
            <summary>
            True if the corresponding cref="JsonClassInfo.PropertyInfoForClassInfo"/> is this instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonPropertyInfo.NameAsString">
            <summary>
            The unescaped name of the property.
            Is either the actual CLR property name,
            the value specified in JsonPropertyNameAttribute,
            or the value returned from PropertyNamingPolicy(clrPropertyName).
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonPropertyInfo.NameAsUtf8Bytes">
            <summary>
            Utf8 version of NameAsString.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonPropertyInfo.EscapedNameSection">
            <summary>
            The escaped name passed to the writer.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonPropertyInfo`1">
            <summary>
            Represents a strongly-typed property to prevent boxing and to create a direct delegate to the getter\setter.
            </summary>
            <typeparamref name="T"/> is the <see cref="P:System.Text.Json.Serialization.JsonConverter`1.TypeToConvert"/> for either the property's converter,
            or a type's converter, if the current instance is a <see cref="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo"/>.
        </member>
        <member name="F:System.Text.Json.JsonPropertyInfo`1._converterIsExternalAndPolymorphic">
            <summary>
            Returns true if the property's converter is external (a user's custom converter)
            and the type to convert is not the same as the declared property type (polymorphic).
            Used to determine whether to perform additional validation on the value returned by the
            converter on deserialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializer">
            <summary>
            Provides functionality to serialize objects or value types to JSON and
            deserialize JSON into objects or value types.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.ResolveMetadataForJsonObject``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Returns true if successful, false is the reader ran out of buffer.
            Sets state.Current.ReturnValue to the reference target for $ref cases;
            Sets state.Current.ReturnValue to a new instance for $id cases.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.ResolveMetadataForJsonArray``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Returns true if successful, false is the reader ran out of buffer.
            Sets state.Current.ReturnValue to the reference target for $ref cases;
            Sets state.Current.ReturnValue to a new instance for $id cases.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.LookupProperty(System.Object,System.ReadOnlySpan{System.Byte},System.Text.Json.ReadStack@,System.Boolean@,System.Boolean)">
            <summary>
            Lookup the property given its name (obtained from the reader) and return it.
            Also sets state.Current.JsonPropertyInfo to a non-null value.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parse the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when the JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parse the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when the JSON is invalid,
            <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Read the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/>is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when the JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Read the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when the JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parse the text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="json">JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when the JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
            UTF-8 methods since the implementation natively uses UTF-8.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parse the text representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="json"/> or <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when the JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
            UTF-8 methods since the implementation natively uses UTF-8.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Reads one JSON value (including objects or arrays) from the provided reader into a <typeparamref name="TValue"/>.
             </summary>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="reader">The reader to read.</param>
             <param name="options">Options to control the serializer behavior during reading.</param>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown when the JSON is invalid,
             <typeparamref name="TValue"/> is not compatible with the JSON,
             or a value could not be read from the reader.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
            
               <para>
                 The <see cref="T:System.Text.Json.JsonReaderOptions"/> used to create the instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> take precedence over the <see cref="T:System.Text.Json.JsonSerializerOptions"/> when they conflict.
                 Hence, <see cref="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas"/>, <see cref="P:System.Text.Json.JsonReaderOptions.MaxDepth"/>, <see cref="P:System.Text.Json.JsonReaderOptions.CommentHandling"/> are used while reading.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Reads one JSON value (including objects or arrays) from the provided reader into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="reader">The reader to read.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="options">Options to control the serializer behavior during reading.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="returnType"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown when the JSON is invalid,
             <paramref name="returnType"/> is not compatible with the JSON,
             or a value could not be read from the reader.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
               <para>
                 The <see cref="T:System.Text.Json.JsonReaderOptions"/> used to create the instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> take precedence over the <see cref="T:System.Text.Json.JsonSerializerOptions"/> when they conflict.
                 Hence, <see cref="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas"/>, <see cref="P:System.Text.Json.JsonReaderOptions.MaxDepth"/>, <see cref="P:System.Text.Json.JsonReaderOptions.CommentHandling"/> are used while reading.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Convert the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Convert the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)"/>
            and <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)"/>
            and <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write one JSON value (including objects or arrays) to the provided writer.
            </summary>
            <param name="writer">The writer to write.</param>
            <param name="value">The value to convert and write.</param>
            <param name="options">Options to control the behavior.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write one JSON value (including objects or arrays) to the provided writer.
            </summary>
            <param name="writer"></param>
            <param name="value">The value to convert and write.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="writer"/> or <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
        </member>
        <member name="T:System.Text.Json.JsonSerializerDefaults">
            <summary>
            Signifies what default options are used by <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonSerializerDefaults.General">
            <summary>
            Specifies that general-purpose values should be used. These are the same settings applied if a <see cref="T:System.Text.Json.JsonSerializerDefaults"/> isn't specified.
            </summary>
            <remarks>
            This option implies that property names are treated as case-sensitive and that "PascalCase" name formatting should be employed.
            </remarks>
        </member>
        <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
            <summary>
            Specifies that values should be used more appropriate to web-based scenarios.
            </summary>
            <remarks>
            This option implies that property names are treated as case-insensitive, "camelCase" name formatting should be employed, and that numbers can be read from JSON strings.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions">
            <summary>
            Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.
            </summary>
            <summary>
            Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
            <summary>
            The list of custom converters.
            </summary>
            <remarks>
            Once serialization or deserialization occurs, the list cannot be modified.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
            <summary>
            Returns the converter for the specified type.
            </summary>
            <param name="typeToConvert">The type to return a converter for.</param>
            <returns>
            The converter for the given type.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The configured <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <paramref name="typeToConvert"/> returned an invalid converter.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="typeToConvert"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Copies the options from a <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance to a new instance.
            </summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance to copy options from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance with a predefined set of options determined by the specified <see cref="T:System.Text.Json.JsonSerializerDefaults"/>.
            </summary>
            <param name="defaults"> The <see cref="T:System.Text.Json.JsonSerializerDefaults"/> to reason about.</param>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being deserialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <remarks>
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonException"/> is thrown if a trailing comma is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
            <summary>
            The default buffer size in bytes used when creating temporary buffers.
            </summary>
            <remarks>The default size is 16K.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the buffer size is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
            <summary>
            The encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
            <summary>
            Specifies the policy used to convert a <see cref="T:System.Collections.IDictionary"/> key's name to another format, such as camel-casing.
            </summary>
            <remarks>
            This property can be set to <see cref="P:System.Text.Json.JsonNamingPolicy.CamelCase"/> to specify a camel-casing policy.
            It is not used when deserializing.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
            <summary>
            Determines whether null values are ignored during serialization and deserialization.
            The default value is false.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            or <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition"/> has been set to a non-default value. These properties cannot be used together.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
            <summary>
            Specifies a condition to determine when properties with default values are ignored during serialization or deserialization.
            The default value is <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if this property is set to <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred,
            or <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues"/> has been set to <see langword="true"/>. These properties cannot be used together.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
            <summary>
            Specifies how number types should be handled when serializing or deserializing.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
            <summary>
            Determines whether read-only properties are ignored during serialization.
            A property is read-only if it contains a public getter but not a public setter.
            The default value is false.
            </summary>
            <remarks>
            Read-only properties are not deserialized regardless of this setting.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
            <summary>
            Determines whether read-only fields are ignored during serialization.
            A property is read-only if it isn't marked with the <c>readonly</c> keyword.
            The default value is false.
            </summary>
            <remarks>
            Read-only fields are not deserialized regardless of this setting.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
            <summary>
            Determines whether fields are handled serialization and deserialization.
            The default value is false.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default (i.e. 0) indicating a max depth of 64.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Going past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
            <summary>
            Specifies the policy used to convert a property's name on an object to another format, such as camel-casing.
            The resulting property name is expected to match the JSON payload during deserialization, and
            will be used when writing the property name during serialization.
            </summary>
            <remarks>
            The policy is not used for properties that have a <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> applied.
            This property can be set to <see cref="P:System.Text.Json.JsonNamingPolicy.CamelCase"/> to specify a camel-casing policy.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
            <summary>
            Determines whether a property's name uses a case-insensitive comparison during deserialization.
            The default value is false.
            </summary>
            <remarks>There is a performance cost associated when the value is true.</remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
            <summary>
            Defines how the comments are handled during deserialization.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling"/> enum range).
            </exception>
            <remarks>
            By default <exception cref="T:System.Text.Json.JsonException"/> is thrown if a comment is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
            <summary>
            Defines whether JSON should pretty print which includes:
            indenting nested JSON tokens, adding new lines, and adding white space between property names and values.
            By default, the JSON is serialized without any extra white space.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
            <summary>
            Configures how object references are handled when reading and writing JSON.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetOrAddClassForRootType(System.Type)">
            <summary>
            Return the ClassInfo for root API calls.
            This has a LRU cache that is intended only for public API calls that specify the root type.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack._continuationCount">
            <summary>
            The number of stack frames when the continuation started.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack._count">
            <summary>
            The number of stack frames including Current. _previous will contain _count-1 higher frames.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.BytesConsumed">
            <summary>
            Bytes consumed in the current loop.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.ReadAhead">
            <summary>
            Internal flag to let us know that we need to read ahead in the inner read loop.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.SupportContinuation">
            <summary>
            Whether we need to read ahead in the inner read loop.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.UseFastPath">
            <summary>
            Whether we can read without the need of saving state for stream and preserve references cases.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStackFrame.IsProcessingDictionary">
            <summary>
            Is the current object a Dictionary.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStackFrame.IsProcessingEnumerable">
            <summary>
            Is the current object an Enumerable.
            </summary>
        </member>
        <member name="T:System.Text.Json.StackFrameObjectState">
            <summary>
            The current state of an object or collection that supports continuation.
            The values are typically compared with the less-than operator so the ordering is important.
            </summary>
        </member>
        <member name="T:System.Text.Json.StackFramePropertyState">
            <summary>
            The current state of a property that supports continuation.
            The values are typically compared with the less-than operator so the ordering is important.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack._continuationCount">
            <summary>
            The number of stack frames when the continuation started.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack._count">
            <summary>
            The number of stack frames including Current. _previous will contain _count-1 higher frames.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.FlushThreshold">
            <summary>
            The amount of bytes to write before the underlying Stream should be flushed and the
            current buffer adjusted to remove the processed bytes.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.SupportContinuation">
            <summary>
            Internal flag to let us know that we need to read ahead in the inner read loop.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStack.Initialize(System.Type,System.Text.Json.JsonSerializerOptions,System.Boolean)">
            <summary>
            Initialize the state without delayed initialization of the JsonClassInfo.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.CollectionEnumerator">
            <summary>
            The enumerator for resumable collections.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.DeclaredJsonPropertyInfo">
            <summary>
            The original JsonPropertyInfo that is not changed. It contains all properties.
            </summary>
            <remarks>
            For objects, it is either the actual (real) JsonPropertyInfo or the <see cref="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo"/> for the class.
            For collections, it is the <see cref="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo"/> for the class and current element.
            </remarks>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.IgnoreDictionaryKeyPolicy">
            <summary>
            Used when processing extension data dictionaries.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.JsonClassInfo">
            <summary>
            The class (POCO or IEnumerable) that is being populated.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.OriginalDepth">
            <summary>
            Validation state for a class.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.PropertyState">
            <summary>
            Property or Element state.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.EnumeratorIndex">
            <summary>
            The enumerator index for resumable collections.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.PolymorphicJsonPropertyInfo">
            <summary>
            The run-time JsonPropertyInfo that contains the ClassInfo and ConverterBase for polymorphic scenarios.
            </summary>
            <remarks>
            For objects, it is the <see cref="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo"/> for the class and current property.
            For collections, it is the <see cref="P:System.Text.Json.JsonClassInfo.PropertyInfoForClassInfo"/> for the class and current element.
            </remarks>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.GetPolymorphicJsonPropertyInfo">
            <summary>
            Return the property that contains the correct polymorphic properties including
            the ClassType and ConverterBase.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.InitializeReEntry(System.Type,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>
            Initializes the state for polymorphic or re-entry cases.
            </summary>
        </member>
        <member name="M:System.Text.Json.TypeExtensions.IsNullableValueType(System.Type)">
            <summary>
            Returns <see langword="true" /> when the given type is of type <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Returns <see langword="true" /> when the given type is either a reference type or of type <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.TypeExtensions.IsAssignableFromInternal(System.Type,System.Type)">
            <summary>
            Returns <see langword="true" /> when the given type is assignable from <paramref name="from"/>.
            </summary>
            <remarks>
            Other than <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> also returns <see langword="true" /> when <paramref name="type"/> is of type <see cref="T:System.Nullable`1"/> where <see langword="T" /> : <see langword="IInterface" /> and <paramref name="from"/> is of type <see langword="IInterface" />.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonWriterHelper.ToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
             <summary>
             Converts a span containing a sequence of UTF-16 bytes into UTF-8 bytes.
            
             This method will consume as many of the input bytes as possible.
            
             On successful exit, the entire input was consumed and encoded successfully. In this case, <paramref name="bytesConsumed"/> will be
             equal to the length of the <paramref name="utf16Source"/> and <paramref name="bytesWritten"/> will equal the total number of bytes written to
             the <paramref name="utf8Destination"/>.
             </summary>
             <param name="utf16Source">A span containing a sequence of UTF-16 bytes.</param>
             <param name="utf8Destination">A span to write the UTF-8 bytes into.</param>
             <param name="bytesConsumed">On exit, contains the number of bytes that were consumed from the <paramref name="utf16Source"/>.</param>
             <param name="bytesWritten">On exit, contains the number of bytes written to <paramref name="utf8Destination"/></param>
             <returns>A <see cref="T:System.Buffers.OperationStatus"/> value representing the state of the conversion.</returns>
        </member>
        <member name="T:System.Text.Json.JsonWriterOptions">
            <summary>
            Provides the ability for the user to define custom behavior when writing JSON
            using the <see cref="T:System.Text.Json.Utf8JsonWriter"/>. By default, the JSON is written without
            any indentation or extra white space. Also, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> will
            throw an exception if the user attempts to write structurally invalid JSON.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
            <summary>
            The encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Indented">
            <summary>
            Defines whether the <see cref="T:System.Text.Json.Utf8JsonWriter"/> should pretty print the JSON which includes:
            indenting nested JSON tokens, adding new lines, and adding white space between property names and values.
            By default, the JSON is written without any extra white space.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
            <summary>
            Defines whether the <see cref="T:System.Text.Json.Utf8JsonWriter"/> should skip structural validation and allow
            the user to write invalid JSON, when set to true. If set to false, any attempts to write invalid JSON will result in
            a <exception cref="T:System.InvalidOperationException"/> to be thrown.
            </summary>
            <remarks>
            If the JSON being written is known to be correct,
            then skipping validation (by setting it to true) could improve performance.
            An example of invalid JSON where the writer will throw (when SkipValidation
            is set to false) is when you write a value within a JSON object
            without a property name.
            </remarks>
        </member>
        <member name="T:System.Text.Json.Utf8JsonWriter">
            <summary>
            Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.
            </summary>
            <remarks>
              <para>
                It writes the text sequentially with no caching and adheres to the JSON RFC
                by default (https://tools.ietf.org/html/rfc8259), with the exception of writing comments.
              </para>
              <para>
                When the user attempts to write invalid JSON and validation is enabled, it throws
                an <see cref="T:System.InvalidOperationException"/> with a context specific error message.
              </para>
              <para>
                To be able to format the output with indentation and whitespace OR to skip validation, create an instance of
                <see cref="T:System.Text.Json.JsonWriterOptions"/> and pass that in to the writer.
              </para>
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
            <summary>
            Returns the amount of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter"/> so far
            that have not yet been flushed to the output and committed.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
            <summary>
            Returns the amount of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter"/> so far.
            </summary>
            <remarks>
            In the case of IBufferwriter, this is how much the IBufferWriter has advanced.
            In the case of Stream, this is how much data has been written to the stream.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.Options">
            <summary>
            Gets the custom behavior when writing JSON using
            the <see cref="T:System.Text.Json.Utf8JsonWriter"/> which indicates whether to format the output
            while writing and whether to skip structural JSON validation or not.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
            <summary>
            Tracks the recursive depth of the nested objects / arrays within the JSON text
            written so far. This provides the depth of the current token.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance with a specified <paramref name="bufferWriter"/>.
            </summary>
            <param name="bufferWriter">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text into.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            By default, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> writes JSON minimized (that is, with no extra whitespace)
            and validates that the JSON being written is structurally valid according to JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.Buffers.IBufferWriter`1" /> that is passed in is null.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance with a specified <paramref name="utf8Json"/>.
            </summary>
            <param name="utf8Json">An instance of <see cref="T:System.IO.Stream" /> used as a destination for writing JSON text into.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            By default, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> writes JSON minimized (that is, with no extra whitespace)
            and validates that the JSON being written is structurally valid according to JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.IO.Stream" /> that is passed in is null.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used.
            </summary>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            and the original output as the destination (either <see cref="T:System.Buffers.IBufferWriter`1" /> or <see cref="T:System.IO.Stream" />).
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used with the new instance of <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="utf8Json">An instance of <see cref="T:System.IO.Stream" /> used as a destination for writing JSON text into.</param>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            but now write to the passed in <see cref="T:System.IO.Stream" /> as the new destination.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.IO.Stream" /> that is passed in is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used with the new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.
            </summary>
            <param name="bufferWriter">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text into.</param>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            but now write to the passed in <see cref="T:System.Buffers.IBufferWriter`1" /> as the new destination.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.Buffers.IBufferWriter`1" /> that is passed in is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
            <summary>
            Commits the JSON text written so far which makes it visible to the output destination.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
            <summary>
            Commits any left over JSON text that has not yet been flushed and releases all resources used by the current instance.
            </summary>
            <remarks>
              <para>
                In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
                In the case of Stream, this writes the data to the stream and flushes it.
              </para>
              <para>
                The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance cannot be re-used after disposing.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
            <summary>
            Asynchronously commits any left over JSON text that has not yet been flushed and releases all resources used by the current instance.
            </summary>
            <remarks>
              <para>
                In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
                In the case of Stream, this writes the data to the stream and flushes it.
              </para>
              <para>
                The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance cannot be re-used after disposing.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously commits the JSON text written so far which makes it visible to the output destination.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the beginning of a JSON array with a pre-encoded property name as the key.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the beginning of a JSON object with a pre-encoded property name as the key.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON array to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
            <summary>
            Writes the end of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name should already be escaped when the instance of <see cref="T:System.Text.Json.JsonEncodedText"/> was created.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write..</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write..</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write..</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="utf8FormattedNumber">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write..</param>
            <param name="utf8FormattedNumber">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
            <summary>
            Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The property name and value is escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})"/> were called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
            <summary>
            Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The value is escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the UTF-8 property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The property name and value are escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The property name and value are escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.
            </summary>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The bytes are encoded before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
            <summary>
            Writes the string text value (as a JSON comment).
            </summary>
            <param name="value">The value to write as a JSON comment within /*..*/.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given string text value contains a comment delimiter (that is, */).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <see langword="null"/>.
            </exception>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the text value (as a JSON comment).
            </summary>
            <param name="value">The value to write as a JSON comment within /*..*/.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given text value contains a comment delimiter (that is, */).
            </exception>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 text value (as a JSON comment).
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</param>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given UTF-8 text value contains a comment delimiter (that is, */).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
            <summary>
            Writes the <see cref="T:System.DateTime"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
            <summary>
            Writes the <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
            <summary>
            Writes the <see cref="T:System.Decimal"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
            <summary>
            Writes the <see cref="T:System.Double"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> on .NET Core 3 or higher
            and 'G17' on any other framework.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
            <summary>
            Writes the <see cref="T:System.Single"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> on .NET Core 3 or higher
            and 'G9' on any other framework.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="utf8FormattedNumber">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
            <summary>
            Writes the <see cref="T:System.Guid"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
            <summary>
            Writes the JSON literal "null" as an element of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as an element of a JSON array.
            </summary>
            <param name="value">The value write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
            <summary>
            Writes the <see cref="T:System.Int32"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
            <summary>
            Writes the <see cref="T:System.Int64"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
            <summary>
            Writes the string text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The value is escaped before writing.</para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNullValue"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValueAsStringUnescaped(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a number as a JSON string. The string value is not escaped.
            </summary>
            <param name="utf8Value"></param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
            <summary>
            Writes the <see cref="T:System.UInt32"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
            <summary>
            Writes the <see cref="T:System.UInt64"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="T:System.Buffers.Text.SequenceValidity">
            <summary>
            Represents the validity of a UTF code unit sequence.
            </summary>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Empty">
            <summary>
            The sequence is empty.
            </summary>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.WellFormed">
            <summary>
            The sequence is well-formed and unambiguously represents a proper Unicode scalar value.
            </summary>
            <remarks>
            [ 20 ] (U+0020 SPACE) is a well-formed UTF-8 sequence.
            [ C3 A9 ] (U+00E9 LATIN SMALL LETTER E WITH ACUTE) is a well-formed UTF-8 sequence.
            [ F0 9F 98 80 ] (U+1F600 GRINNING FACE) is a well-formed UTF-8 sequence.
            [ D83D DE00 ] (U+1F600 GRINNING FACE) is a well-formed UTF-16 sequence.
            </remarks>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Incomplete">
            <summary>
            The sequence is not well-formed on its own, but it could appear as a prefix
            of a longer well-formed sequence. More code units are needed to make a proper
            determination as to whether this sequence is well-formed. Incomplete sequences
            can only appear at the end of a string.
            </summary>
            <remarks>
            [ C2 ] is an incomplete UTF-8 sequence if it is followed by nothing.
            [ F0 9F ] is an incomplete UTF-8 sequence if it is followed by nothing.
            [ D83D ] is an incomplete UTF-16 sequence if it is followed by nothing.
            </remarks>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Invalid">
            <summary>
            The sequence is never well-formed anywhere, or this sequence can never appear as a prefix
            of a longer well-formed sequence, or the sequence was improperly terminated by the code
            unit which appeared immediately after this sequence.
            </summary>
            <remarks>
            [ 80 ] is an invalid UTF-8 sequence (code unit cannot appear at start of sequence).
            [ FE ] is an invalid UTF-8 sequence (sequence is never well-formed anywhere in UTF-8 string).
            [ C2 ] is an invalid UTF-8 sequence if it is followed by [ 20 ] (sequence improperly terminated).
            [ ED A0 ] is an invalid UTF-8 sequence (sequence is never well-formed anywhere in UTF-8 string).
            [ DE00 ] is an invalid UTF-16 sequence (code unit cannot appear at start of sequence).
            </remarks>
        </member>
        <member name="P:System.SR.ArrayDepthTooLarge">
            <summary>The maximum configured depth of {0} has been exceeded. Cannot read next JSON array.</summary>
        </member>
        <member name="P:System.SR.CallFlushToAvoidDataLoss">
            <summary>The JSON writer needs to be flushed before getting the current state. There are {0} bytes that have not been committed to the output.</summary>
        </member>
        <member name="P:System.SR.CannotReadIncompleteUTF16">
            <summary>Cannot read incomplete UTF-16 JSON text as string with missing low surrogate.</summary>
        </member>
        <member name="P:System.SR.CannotReadInvalidUTF16">
            <summary>Cannot read invalid UTF-16 JSON text as string. Invalid surrogate value: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotStartObjectArrayAfterPrimitiveOrClose">
            <summary>Cannot write the start of an object/array after a single JSON value or outside of an existing closed object/array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotStartObjectArrayWithoutProperty">
            <summary>Cannot write the start of an object or array without a property name. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotTranscodeInvalidUtf8">
            <summary>Cannot transcode invalid UTF-8 JSON text to UTF-16 string.</summary>
        </member>
        <member name="P:System.SR.CannotDecodeInvalidBase64">
            <summary>Cannot decode JSON text that is not encoded as valid Base64 to bytes.</summary>
        </member>
        <member name="P:System.SR.CannotTranscodeInvalidUtf16">
            <summary>Cannot transcode invalid UTF-16 string to UTF-8 JSON text.</summary>
        </member>
        <member name="P:System.SR.CannotEncodeInvalidUTF16">
            <summary>Cannot encode invalid UTF-16 text as JSON. Invalid surrogate value: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotEncodeInvalidUTF8">
            <summary>Cannot encode invalid UTF-8 text as JSON. Invalid input: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWritePropertyWithinArray">
            <summary>Cannot write a JSON property within an array or as the first JSON token. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWritePropertyAfterProperty">
            <summary>Cannot write a JSON property name following another property name. A JSON value is missing.</summary>
        </member>
        <member name="P:System.SR.CannotWriteValueAfterPrimitiveOrClose">
            <summary>Cannot write a JSON value after a single JSON value or outside of an existing closed object/array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWriteValueWithinObject">
            <summary>Cannot write a JSON value within an object without a property name. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.DepthTooLarge">
            <summary>CurrentDepth ({0}) is equal to or larger than the maximum allowed depth of {1}. Cannot write the next JSON object or array.</summary>
        </member>
        <member name="P:System.SR.EmptyJsonIsInvalid">
            <summary>Writing an empty JSON payload (excluding comments) is invalid.</summary>
        </member>
        <member name="P:System.SR.EndOfCommentNotFound">
            <summary>Expected end of comment, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.EndOfStringNotFound">
            <summary>Expected end of string, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedEndAfterSingleJson">
            <summary>'{0}' is invalid after a single JSON value. Expected end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedEndOfDigitNotFound">
            <summary>'{0}' is an invalid end of a number. Expected a delimiter.</summary>
        </member>
        <member name="P:System.SR.ExpectedFalse">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'false'.</summary>
        </member>
        <member name="P:System.SR.ExpectedJsonTokens">
            <summary>The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true.</summary>
        </member>
        <member name="P:System.SR.ExpectedOneCompleteToken">
            <summary>The input does not contain any complete JSON tokens. Expected the input to have at least one valid, complete, JSON token.</summary>
        </member>
        <member name="P:System.SR.ExpectedNextDigitEValueNotFound">
            <summary>'{0}' is an invalid end of a number. Expected 'E' or 'e'.</summary>
        </member>
        <member name="P:System.SR.ExpectedNull">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'null'.</summary>
        </member>
        <member name="P:System.SR.ExpectedSeparatorAfterPropertyNameNotFound">
            <summary>'{0}' is invalid after a property name. Expected a ':'.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyNotFound">
            <summary>'{0}' is an invalid start of a property name. Expected a '"'.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyOrValueNotFound">
            <summary>Expected start of a property name or value, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfValueNotFound">
            <summary>'{0}' is an invalid start of a value.</summary>
        </member>
        <member name="P:System.SR.ExpectedTrue">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'true'.</summary>
        </member>
        <member name="P:System.SR.ExpectedValueAfterPropertyNameNotFound">
            <summary>Expected a value, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.FailedToGetLargerSpan">
            <summary>The 'IBufferWriter' could not provide an output buffer that is large enough to continue writing.</summary>
        </member>
        <member name="P:System.SR.FoundInvalidCharacter">
            <summary>'{0}' is invalid after a value. Expected either ',', '}}', or ']'.</summary>
        </member>
        <member name="P:System.SR.InvalidCast">
            <summary>Cannot get the value of a token type '{0}' as a {1}.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterAfterEscapeWithinString">
            <summary>'{0}' is an invalid escapable character within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterWithinString">
            <summary>'{0}' is invalid within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.InvalidEndOfJsonNonPrimitive">
            <summary>'{0}' is an invalid token type for the end of the JSON payload. Expected either 'EndArray' or 'EndObject'.</summary>
        </member>
        <member name="P:System.SR.InvalidHexCharacterWithinString">
            <summary>'{0}' is not a hex digit following '\u' within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.JsonDocumentDoesNotSupportComments">
            <summary>Comments cannot be stored in a JsonDocument, only the Skip and Disallow comment handling modes are supported.</summary>
        </member>
        <member name="P:System.SR.JsonElementHasWrongType">
            <summary>The requested operation requires an element of type '{0}', but the target element has type '{1}'.</summary>
        </member>
        <member name="P:System.SR.MaxDepthMustBePositive">
            <summary>Max depth must be positive.</summary>
        </member>
        <member name="P:System.SR.CommentHandlingMustBeValid">
            <summary>The JsonCommentHandling enum must be set to one of the supported values.</summary>
        </member>
        <member name="P:System.SR.MismatchedObjectArray">
            <summary>'{0}' is invalid without a matching open.</summary>
        </member>
        <member name="P:System.SR.CannotWriteEndAfterProperty">
            <summary>'{0}' is invalid following a property name.</summary>
        </member>
        <member name="P:System.SR.ObjectDepthTooLarge">
            <summary>The maximum configured depth of {0} has been exceeded. Cannot read next JSON object.</summary>
        </member>
        <member name="P:System.SR.PropertyNameTooLarge">
            <summary>The JSON property name of length {0} is too large and not supported.</summary>
        </member>
        <member name="P:System.SR.FormatDecimal">
            <summary>The JSON value is either too large or too small for a Decimal.</summary>
        </member>
        <member name="P:System.SR.FormatDouble">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a Double.</summary>
        </member>
        <member name="P:System.SR.FormatInt32">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an Int32.</summary>
        </member>
        <member name="P:System.SR.FormatInt64">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an Int64.</summary>
        </member>
        <member name="P:System.SR.FormatSingle">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a Single.</summary>
        </member>
        <member name="P:System.SR.FormatUInt32">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a UInt32.</summary>
        </member>
        <member name="P:System.SR.FormatUInt64">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a UInt64.</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundAfterDecimal">
            <summary>'{0}' is invalid within a number, immediately after a decimal point ('.'). Expected a digit ('0'-'9').</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundAfterSign">
            <summary>'{0}' is invalid within a number, immediately after a sign character ('+' or '-'). Expected a digit ('0'-'9').</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundEndOfData">
            <summary>Expected a digit ('0'-'9'), but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.SpecialNumberValuesNotSupported">
            <summary>.NET number values such as positive and negative infinity cannot be written as valid JSON.</summary>
        </member>
        <member name="P:System.SR.ValueTooLarge">
            <summary>The JSON value of length {0} is too large and not supported.</summary>
        </member>
        <member name="P:System.SR.ZeroDepthAtEnd">
            <summary>Expected depth to be zero at the end of the JSON payload. There is an open JSON object or array that should be closed.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToConvertValue">
            <summary>The JSON value could not be converted to {0}.</summary>
        </member>
        <member name="P:System.SR.DeserializeWrongType">
            <summary>The specified type {0} must derive from the specific value's type {1}.</summary>
        </member>
        <member name="P:System.SR.SerializationInvalidBufferSize">
            <summary>The value must be greater than zero.</summary>
        </member>
        <member name="P:System.SR.BufferWriterAdvancedTooFar">
            <summary>Cannot advance past the end of the buffer, which has a size of {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidComparison">
            <summary>Cannot compare the value of a token type '{0}' to text.</summary>
        </member>
        <member name="P:System.SR.FormatDateTime">
            <summary>The JSON value is not in a supported DateTime format.</summary>
        </member>
        <member name="P:System.SR.FormatDateTimeOffset">
            <summary>The JSON value is not in a supported DateTimeOffset format.</summary>
        </member>
        <member name="P:System.SR.FormatGuid">
            <summary>The JSON value is not in a supported Guid format.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyOrValueAfterComment">
            <summary>'{0}' is an invalid start of a property name or value, after a comment.</summary>
        </member>
        <member name="P:System.SR.TrailingCommaNotAllowedBeforeArrayEnd">
            <summary>The JSON array contains a trailing comma at the end which is not supported in this mode. Change the reader options.</summary>
        </member>
        <member name="P:System.SR.TrailingCommaNotAllowedBeforeObjectEnd">
            <summary>The JSON object contains a trailing comma at the end which is not supported in this mode. Change the reader options.</summary>
        </member>
        <member name="P:System.SR.SerializerOptionsImmutable">
            <summary>Serializer options cannot be changed once serialization or deserialization has occurred.</summary>
        </member>
        <member name="P:System.SR.StreamNotWritable">
            <summary>Stream is not writable.</summary>
        </member>
        <member name="P:System.SR.CannotWriteCommentWithEmbeddedDelimiter">
            <summary>Cannot write a comment value which contains the end of comment delimiter.</summary>
        </member>
        <member name="P:System.SR.SerializerPropertyNameConflict">
            <summary>The JSON property name for '{0}.{1}' collides with another property.</summary>
        </member>
        <member name="P:System.SR.SerializerPropertyNameNull">
            <summary>The JSON property name for '{0}.{1}' cannot be null.</summary>
        </member>
        <member name="P:System.SR.DeserializeDuplicateKey">
            <summary>An item with the same property name '{0}' has already been added.</summary>
        </member>
        <member name="P:System.SR.SerializationDataExtensionPropertyInvalid">
            <summary>The data extension property '{0}.{1}' does not match the required signature of IDictionary&lt;string, JsonElement&gt; or IDictionary&lt;string, object&gt;.</summary>
        </member>
        <member name="P:System.SR.SerializationDuplicateTypeAttribute">
            <summary>The type '{0}' cannot have more than one property that has the attribute '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializationNotSupportedType">
            <summary>The type '{0}' is not supported.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterAtStartOfComment">
            <summary>'{0}' is invalid after '/' at the beginning of the comment. Expected either '/' or '*'.</summary>
        </member>
        <member name="P:System.SR.UnexpectedEndOfDataWhileReadingComment">
            <summary>Unexpected end of data while reading a comment.</summary>
        </member>
        <member name="P:System.SR.CannotSkip">
            <summary>Cannot skip tokens on partial JSON. Either get the whole payload and create a Utf8JsonReader instance where isFinalBlock is true or call TrySkip.</summary>
        </member>
        <member name="P:System.SR.NotEnoughData">
            <summary>There is not enough data to read through the entire JSON array or object.</summary>
        </member>
        <member name="P:System.SR.UnexpectedEndOfLineSeparator">
            <summary>Found invalid line or paragraph separator character while reading a comment.</summary>
        </member>
        <member name="P:System.SR.JsonSerializerDoesNotSupportComments">
            <summary>Comments cannot be stored when deserializing objects, only the Skip and Disallow comment handling modes are supported.</summary>
        </member>
        <member name="P:System.SR.DeserializeNoConstructor">
            <summary>Deserialization of types without a parameterless constructor, a singular parameterized constructor, or a parameterized constructor annotated with '{0}' is not supported. Type '{1}'.</summary>
        </member>
        <member name="P:System.SR.DeserializePolymorphicInterface">
            <summary>Deserialization of interface types is not supported. Type '{0}'.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterOnAttributeNotCompatible">
            <summary>The converter specified on '{0}' is not compatible with the type '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterOnAttributeInvalid">
            <summary>The converter specified on '{0}' does not derive from JsonConverter or have a public parameterless constructor.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterRead">
            <summary>The converter '{0}' read too much or not enough.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterNotCompatible">
            <summary>The converter '{0}' is not compatible with the type '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterWrite">
            <summary>The converter '{0}' wrote too much or not enough.</summary>
        </member>
        <member name="P:System.SR.NamingPolicyReturnNull">
            <summary>The naming policy '{0}' cannot return null.</summary>
        </member>
        <member name="P:System.SR.SerializationDuplicateAttribute">
            <summary>The attribute '{0}' cannot exist more than once on '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializeUnableToSerialize">
            <summary>The object or value could not be serialized.</summary>
        </member>
        <member name="P:System.SR.FormatByte">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an unsigned byte.</summary>
        </member>
        <member name="P:System.SR.FormatInt16">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an Int16.</summary>
        </member>
        <member name="P:System.SR.FormatSByte">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a signed byte.</summary>
        </member>
        <member name="P:System.SR.FormatUInt16">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a UInt16.</summary>
        </member>
        <member name="P:System.SR.SerializerCycleDetected">
            <summary>A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of {0}. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles.</summary>
        </member>
        <member name="P:System.SR.EmptyStringToInitializeNumber">
            <summary>Expected a number, but instead got empty string.</summary>
        </member>
        <member name="P:System.SR.JsonObjectDuplicateKey">
            <summary>Property with name '{0}' already exists.</summary>
        </member>
        <member name="P:System.SR.PropertyNotFound">
            <summary>Property with name '{0}' not found.</summary>
        </member>
        <member name="P:System.SR.PropertyTypeMismatch">
            <summary>Property with name '{0}' has a different type than expected.</summary>
        </member>
        <member name="P:System.SR.InvalidDuplicatePropertyNameHandling">
            <summary>The DuplicatePropertyNameHandling enum must be set to one of the supported values.</summary>
        </member>
        <member name="P:System.SR.InvalidLeadingZeroInNumber">
            <summary>Invalid leading zero before '{0}'.</summary>
        </member>
        <member name="P:System.SR.ArrayModifiedDuringIteration">
            <summary>The JSON array was modified during iteration.</summary>
        </member>
        <member name="P:System.SR.NotNodeJsonElementParent">
            <summary>This JsonElement instance was not built from a JsonNode and is immutable.</summary>
        </member>
        <member name="P:System.SR.MetadataCannotParsePreservedObjectToImmutable">
            <summary>Cannot parse a JSON object containing metadata properties like '$id' into an array or immutable collection type. Type '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataDuplicateIdFound">
            <summary>The value of the '$id' metadata property '{0}' conflicts with an existing identifier.</summary>
        </member>
        <member name="P:System.SR.MetadataIdIsNotFirstProperty">
            <summary>The metadata property '$id' must be the first property in the JSON object.</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidReferenceToValueType">
            <summary>Invalid reference to value type '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidTokenAfterValues">
            <summary>The '$values' metadata property must be a JSON array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataPreservedArrayFailed">
            <summary>Deserialization failed for one of these reasons:
            1. {0}
            2. {1}</summary>
        </member>
        <member name="P:System.SR.MetadataPreservedArrayInvalidProperty">
            <summary>Invalid property '{0}' found within a JSON object that must only contain metadata properties and the nested JSON array to be preserved.</summary>
        </member>
        <member name="P:System.SR.MetadataPreservedArrayPropertyNotFound">
            <summary>One or more metadata properties, such as '$id' and '$values', were not found within a JSON object that must only contain metadata properties and the nested JSON array to be preserved.</summary>
        </member>
        <member name="P:System.SR.MetadataReferenceCannotContainOtherProperties">
            <summary>A JSON object that contains a '$ref' metadata property must not contain any other properties.</summary>
        </member>
        <member name="P:System.SR.MetadataReferenceNotFound">
            <summary>Reference '{0}' not found.</summary>
        </member>
        <member name="P:System.SR.MetadataValueWasNotString">
            <summary>The '$id' and '$ref' metadata properties must be JSON strings. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidPropertyWithLeadingDollarSign">
            <summary>Properties that start with '$' are not allowed on preserve mode, either escape the character or turn off preserve references by setting ReferenceHandler to null.</summary>
        </member>
        <member name="P:System.SR.MultipleMembersBindWithConstructorParameter">
            <summary>Members '{0}' and '{1}' on type '{2}' cannot both bind with parameter '{3}' in constructor '{4}' on deserialization.</summary>
        </member>
        <member name="P:System.SR.ConstructorParamIncompleteBinding">
            <summary>Each parameter in constructor '{0}' on type '{1}' must bind to an object property or field on deserialization. Each parameter name must match with a property or field on the object. The match can be case-insensitive.</summary>
        </member>
        <member name="P:System.SR.ConstructorMaxOf64Parameters">
            <summary>The constructor '{0}' on type '{1}' may not have more than 64 parameters for deserialization.</summary>
        </member>
        <member name="P:System.SR.ObjectWithParameterizedCtorRefMetadataNotHonored">
            <summary>Reference metadata is not honored when deserializing types using parameterized constructors. See type '{0}'.</summary>
        </member>
        <member name="P:System.SR.SerializerConverterFactoryReturnsNull">
            <summary>The converter '{0}' cannot return a null value.</summary>
        </member>
        <member name="P:System.SR.SerializationNotSupportedParentType">
            <summary>The unsupported member type is located on type '{0}'.</summary>
        </member>
        <member name="P:System.SR.ExtensionDataCannotBindToCtorParam">
            <summary>The extension data property '{0}' on type '{1}' cannot bind with a parameter in constructor '{2}'.</summary>
        </member>
        <member name="P:System.SR.BufferMaximumSizeExceeded">
            <summary>Cannot allocate a buffer of size {0}.</summary>
        </member>
        <member name="P:System.SR.CannotSerializeInvalidType">
            <summary>The type '{0}' is invalid for serialization or deserialization because it is a pointer type, is a ref struct, or contains generic parameters that have not been replaced by specific types.</summary>
        </member>
        <member name="P:System.SR.SerializeTypeInstanceNotSupported">
            <summary>Serialization and deserialization of 'System.Type' instances are not supported and should be avoided since they can lead to security issues.</summary>
        </member>
        <member name="P:System.SR.JsonIncludeOnNonPublicInvalid">
            <summary>The non-public property '{0}' on type '{1}' is annotated with 'JsonIncludeAttribute' which is invalid.</summary>
        </member>
        <member name="P:System.SR.CannotSerializeInvalidMember">
            <summary>The type '{0}' of property '{1}' on type '{2}' is invalid for serialization or deserialization because it is a pointer type, is a ref struct, or contains generic parameters that have not been replaced by specific types.</summary>
        </member>
        <member name="P:System.SR.CannotPopulateCollection">
            <summary>The collection type '{0}' is abstract, an interface, or is read only, and could not be instantiated and populated.</summary>
        </member>
        <member name="P:System.SR.DefaultIgnoreConditionAlreadySpecified">
            <summary>'IgnoreNullValues' and 'DefaultIgnoreCondition' cannot both be set to non-default values.</summary>
        </member>
        <member name="P:System.SR.DefaultIgnoreConditionInvalid">
            <summary>The value cannot be 'JsonIgnoreCondition.Always'.</summary>
        </member>
        <member name="P:System.SR.FormatBoolean">
            <summary>The JSON value is not in a supported Boolean format.</summary>
        </member>
        <member name="P:System.SR.DictionaryKeyTypeNotSupported">
            <summary>The type '{0}' is not a supported Dictionary key type.</summary>
        </member>
        <member name="P:System.SR.IgnoreConditionOnValueTypeInvalid">
            <summary>The ignore condition 'JsonIgnoreCondition.WhenWritingNull' is not valid on value-type member '{0}' on type '{1}'. Consider using 'JsonIgnoreCondition.WhenWritingDefault'.</summary>
        </member>
        <member name="P:System.SR.NumberHandlingConverterMustBeBuiltIn">
            <summary>'JsonNumberHandlingAttribute' cannot be placed on a property, field, or type that is handled by a custom converter. See usage(s) of converter '{0}' on type '{1}'.</summary>
        </member>
        <member name="P:System.SR.NumberHandlingOnPropertyTypeMustBeNumberOrCollection">
            <summary>When 'JsonNumberHandlingAttribute' is placed on a property or field, the property or field must be a number or a collection. See member '{0}' on type '{1}'.</summary>
        </member>
        <member name="P:System.SR.ConverterCanConvertNullableRedundant">
            <summary>The converter '{0}' handles type '{1}' but is being asked to convert type '{2}'. Either create a separate converter for type '{2}' or change the converter's 'CanConvert' method to only return 'true' for a single type.</summary>
        </member>
        <member name="P:System.SR.MetadataReferenceOfTypeCannotBeAssignedToType">
            <summary>The object with reference id '{0}' of type '{1}' cannot be assigned to the type '{2}'.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToAssignValue">
            <summary>Unable to cast object of type '{0}' to type '{1}'.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToAssignNull">
            <summary>Unable to assign 'null' to the property or field of type '{0}'.</summary>
        </member>
    </members>
</doc>
