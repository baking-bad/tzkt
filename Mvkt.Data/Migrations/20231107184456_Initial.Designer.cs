// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Mvkt.Data;

#nullable disable

namespace Mvkt.Data.Migrations
{
    [DbContext(typeof(MvktContext))]
    [Migration("20231107184456_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mvkt.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveRefutationGamesCount")
                        .HasColumnType("integer");

                    b.Property<int>("ActiveTicketsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ActiveTokensCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(37)
                        .HasColumnType("character varying(37)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegationLevel")
                        .HasColumnType("integer");

                    b.Property<int>("DelegationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DrainDelegateCount")
                        .HasColumnType("integer");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("IncreasePaidStorageCount")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<long>("LostBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("MigrationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("OriginationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RefutationGamesCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevealsCount")
                        .HasColumnType("integer");

                    b.Property<long>("RollupBonds")
                        .HasColumnType("bigint");

                    b.Property<int>("RollupsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupAddMessagesCount")
                        .HasColumnType("integer");

                    b.Property<long>("SmartRollupBonds")
                        .HasColumnType("bigint");

                    b.Property<int>("SmartRollupCementCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupExecuteCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupOriginateCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupPublishCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupRecoverBondCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupRefuteCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Staked")
                        .HasColumnType("boolean");

                    b.Property<int>("TicketBalancesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TicketTransfersCount")
                        .HasColumnType("integer");

                    b.Property<int>("TokenBalancesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TokenTransfersCount")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TransferTicketCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupCommitCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupDispatchTicketsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupFinalizeCommitmentCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupOriginationCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupRejectionCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupRemoveCommitmentCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupReturnBondCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupSubmitBatchCount")
                        .HasColumnType("integer");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("UpdateConsensusKeyCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DelegateId");

                    b.HasIndex("Extras");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Extras"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Extras"), new[] { "jsonb_path_ops" });

                    b.HasIndex("FirstLevel");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Metadata");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Metadata"), new[] { "jsonb_path_ops" });

                    b.HasIndex("Staked");

                    b.HasIndex("Type");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<byte>("Type").HasValue((byte)3);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Mvkt.Data.Models.ActivationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("ActivationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.AppState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AIActivated")
                        .HasColumnType("boolean");

                    b.Property<int>("AIActivationCycle")
                        .HasColumnType("integer");

                    b.Property<int>("AIFinalUpvoteLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccountCounter")
                        .HasColumnType("integer");

                    b.Property<int>("AccountsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ActivationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("AutostakingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BallotOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapCounter")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapKeyCounter")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapUpdateCounter")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksCount")
                        .HasColumnType("integer");

                    b.Property<string>("Chain")
                        .HasColumnType("text");

                    b.Property<string>("ChainId")
                        .HasColumnType("text");

                    b.Property<int>("CommitmentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ConstantsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("CyclesCount")
                        .HasColumnType("integer");

                    b.Property<int>("DelegationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DomainsLevel")
                        .HasColumnType("integer");

                    b.Property<string>("DomainsNameRegistry")
                        .HasColumnType("text");

                    b.Property<int>("DoubleBakingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleEndorsingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoublePreendorsingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DrainDelegateOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsementOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsingRewardOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("EventCounter")
                        .HasColumnType("integer");

                    b.Property<int>("EventsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("InboxMessageCounter")
                        .HasColumnType("integer");

                    b.Property<int>("IncreasePaidStorageOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("KnownHead")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ManagerCounter")
                        .HasColumnType("integer");

                    b.Property<int>("MigrationOpsCount")
                        .HasColumnType("integer");

                    b.Property<string>("NextProtocol")
                        .HasColumnType("text");

                    b.Property<int>("NonceRevelationOpsCount")
                        .HasColumnType("integer");

                    b.Property<long>("OperationCounter")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("PendingStakingParameters")
                        .HasColumnType("integer");

                    b.Property<int>("PreendorsementOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<int>("ProtocolsCount")
                        .HasColumnType("integer");

                    b.Property<double>("QuoteBtc")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteCny")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteEth")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteEur")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteGbp")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteJpy")
                        .HasColumnType("double precision");

                    b.Property<double>("QuoteKrw")
                        .HasColumnType("double precision");

                    b.Property<int>("QuoteLevel")
                        .HasColumnType("integer");

                    b.Property<double>("QuoteUsd")
                        .HasColumnType("double precision");

                    b.Property<int>("RefutationGameCounter")
                        .HasColumnType("integer");

                    b.Property<int>("RegisterConstantOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevealOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevelationPenaltyOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ScriptCounter")
                        .HasColumnType("integer");

                    b.Property<int>("SetDepositsLimitOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupAddMessagesOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupCementOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupCommitmentCounter")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupExecuteOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupOriginateOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupPublishOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupRecoverBondOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupRefuteOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("StakingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("StorageCounter")
                        .HasColumnType("integer");

                    b.Property<int>("TicketBalancesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TicketTransfersCount")
                        .HasColumnType("integer");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TokenBalancesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TokenTransfersCount")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCount")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TransferTicketOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupCommitOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupDispatchTicketsOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupFinalizeCommitmentOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupOriginationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupRejectionOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupRemoveCommitmentOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupReturnBondOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TxRollupSubmitBatchOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("UpdateConsensusKeyOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("VdfRevelationOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("VotingEpoch")
                        .HasColumnType("integer");

                    b.Property<int>("VotingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppState");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AIActivated = false,
                            AIActivationCycle = 0,
                            AIFinalUpvoteLevel = 0,
                            AccountCounter = 0,
                            AccountsCount = 0,
                            ActivationOpsCount = 0,
                            AutostakingOpsCount = 0,
                            BallotOpsCount = 0,
                            BigMapCounter = 0,
                            BigMapKeyCounter = 0,
                            BigMapUpdateCounter = 0,
                            BlocksCount = 0,
                            CommitmentsCount = 0,
                            ConstantsCount = 0,
                            Cycle = -1,
                            CyclesCount = 0,
                            DelegationOpsCount = 0,
                            DomainsLevel = 0,
                            DoubleBakingOpsCount = 0,
                            DoubleEndorsingOpsCount = 0,
                            DoublePreendorsingOpsCount = 0,
                            DrainDelegateOpsCount = 0,
                            EndorsementOpsCount = 0,
                            EndorsingRewardOpsCount = 0,
                            EventCounter = 0,
                            EventsCount = 0,
                            Hash = "",
                            InboxMessageCounter = 0,
                            IncreasePaidStorageOpsCount = 0,
                            KnownHead = 0,
                            LastSync = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = -1,
                            ManagerCounter = 0,
                            MigrationOpsCount = 0,
                            NextProtocol = "",
                            NonceRevelationOpsCount = 0,
                            OperationCounter = 0L,
                            OriginationOpsCount = 0,
                            PendingStakingParameters = 0,
                            PreendorsementOpsCount = 0,
                            ProposalOpsCount = 0,
                            ProposalsCount = 0,
                            Protocol = "",
                            ProtocolsCount = 0,
                            QuoteBtc = 0.0,
                            QuoteCny = 0.0,
                            QuoteEth = 0.0,
                            QuoteEur = 0.0,
                            QuoteGbp = 0.0,
                            QuoteJpy = 0.0,
                            QuoteKrw = 0.0,
                            QuoteLevel = -1,
                            QuoteUsd = 0.0,
                            RefutationGameCounter = 0,
                            RegisterConstantOpsCount = 0,
                            RevealOpsCount = 0,
                            RevelationPenaltyOpsCount = 0,
                            ScriptCounter = 0,
                            SetDepositsLimitOpsCount = 0,
                            SmartRollupAddMessagesOpsCount = 0,
                            SmartRollupCementOpsCount = 0,
                            SmartRollupCommitmentCounter = 0,
                            SmartRollupExecuteOpsCount = 0,
                            SmartRollupOriginateOpsCount = 0,
                            SmartRollupPublishOpsCount = 0,
                            SmartRollupRecoverBondOpsCount = 0,
                            SmartRollupRefuteOpsCount = 0,
                            StakingOpsCount = 0,
                            StorageCounter = 0,
                            TicketBalancesCount = 0,
                            TicketTransfersCount = 0,
                            TicketsCount = 0,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TokenBalancesCount = 0,
                            TokenTransfersCount = 0,
                            TokensCount = 0,
                            TransactionOpsCount = 0,
                            TransferTicketOpsCount = 0,
                            TxRollupCommitOpsCount = 0,
                            TxRollupDispatchTicketsOpsCount = 0,
                            TxRollupFinalizeCommitmentOpsCount = 0,
                            TxRollupOriginationOpsCount = 0,
                            TxRollupRejectionOpsCount = 0,
                            TxRollupRemoveCommitmentOpsCount = 0,
                            TxRollupReturnBondOpsCount = 0,
                            TxRollupSubmitBatchOpsCount = 0,
                            UpdateConsensusKeyOpsCount = 0,
                            VdfRevelationOpsCount = 0,
                            VotingEpoch = -1,
                            VotingPeriod = -1
                        });
                });

            modelBuilder.Entity("Mvkt.Data.Models.AutostakingOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.ToTable("AutostakingOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BakerCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<long>("BakingPower")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockRewardsLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockRewardsStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockRewardsStakedShared")
                        .HasColumnType("bigint");

                    b.Property<int>("Blocks")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("DelegatorsCount")
                        .HasColumnType("integer");

                    b.Property<long>("DoubleBakingLostExternalStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingLostExternalUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingLostStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingLostUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleBakingRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostExternalStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostExternalUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingLostUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleEndorsingRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("DoublePreendorsingLostExternalStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoublePreendorsingLostExternalUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoublePreendorsingLostStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoublePreendorsingLostUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("DoublePreendorsingRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementRewardsLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementRewardsStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementRewardsStakedShared")
                        .HasColumnType("bigint");

                    b.Property<int>("Endorsements")
                        .HasColumnType("integer");

                    b.Property<double>("ExpectedBlocks")
                        .HasColumnType("double precision");

                    b.Property<double>("ExpectedEndorsements")
                        .HasColumnType("double precision");

                    b.Property<long>("ExternalDelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("FutureBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("FutureBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("FutureEndorsementRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("FutureEndorsements")
                        .HasColumnType("integer");

                    b.Property<long>("MissedBlockFees")
                        .HasColumnType("bigint");

                    b.Property<long>("MissedBlockRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedBlocks")
                        .HasColumnType("integer");

                    b.Property<long>("MissedEndorsementRewards")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedEndorsements")
                        .HasColumnType("integer");

                    b.Property<long>("NonceRevelationLosses")
                        .HasColumnType("bigint");

                    b.Property<long>("NonceRevelationRewardsLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("NonceRevelationRewardsStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("NonceRevelationRewardsStakedShared")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnDelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<int>("StakersCount")
                        .HasColumnType("integer");

                    b.Property<long>("TotalBakingPower")
                        .HasColumnType("bigint");

                    b.Property<long>("VdfRevelationRewardsLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("VdfRevelationRewardsStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("VdfRevelationRewardsStakedShared")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Cycle", "BakerId");

                    b.ToTable("BakerCycles");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BakingRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Round")
                        .HasColumnType("integer");

                    b.Property<int?>("Slots")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Cycle");

                    b.HasIndex("Level");

                    b.HasIndex("Cycle", "BakerId");

                    b.ToTable("BakingRights");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BallotOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Vote")
                        .HasColumnType("integer");

                    b.Property<long>("VotingPower")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Epoch");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("Period");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("BallotOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BigMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ActiveKeys")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<byte[]>("KeyType")
                        .HasColumnType("bytea");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Ptr")
                        .HasColumnType("integer");

                    b.Property<string>("StoragePath")
                        .HasColumnType("text");

                    b.Property<int>("Tags")
                        .HasColumnType("integer");

                    b.Property<int>("TotalKeys")
                        .HasColumnType("integer");

                    b.Property<int>("Updates")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ValueType")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("Ptr");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Ptr")
                        .IsUnique();

                    b.ToTable("BigMaps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BigMapKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BigMapPtr")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<string>("JsonKey")
                        .HasColumnType("jsonb");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb");

                    b.Property<string>("KeyHash")
                        .HasMaxLength(54)
                        .HasColumnType("character varying(54)");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RawKey")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RawValue")
                        .HasColumnType("bytea");

                    b.Property<int>("Updates")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BigMapPtr");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("JsonKey");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("JsonKey"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("JsonKey"), new[] { "jsonb_path_ops" });

                    b.HasIndex("JsonValue");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("JsonValue"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("JsonValue"), new[] { "jsonb_path_ops" });

                    b.HasIndex("LastLevel");

                    b.HasIndex("BigMapPtr", "Active")
                        .HasFilter("\"Active\" = true");

                    b.HasIndex("BigMapPtr", "KeyHash");

                    b.ToTable("BigMapKeys");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BigMapUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int?>("BigMapKeyId")
                        .HasColumnType("integer");

                    b.Property<int>("BigMapPtr")
                        .HasColumnType("integer");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("MigrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RawValue")
                        .HasColumnType("bytea");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BigMapKeyId")
                        .HasFilter("\"BigMapKeyId\" is not null");

                    b.HasIndex("BigMapPtr");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("MigrationId")
                        .HasFilter("\"MigrationId\" is not null");

                    b.HasIndex("OriginationId")
                        .HasFilter("\"OriginationId\" is not null");

                    b.HasIndex("TransactionId")
                        .HasFilter("\"TransactionId\" is not null");

                    b.ToTable("BigMapUpdates");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Block", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("AIToggle")
                        .HasColumnType("boolean");

                    b.Property<int>("AIToggleEma")
                        .HasColumnType("integer");

                    b.Property<int>("BlockRound")
                        .HasColumnType("integer");

                    b.Property<long>("BonusLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("BonusStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("BonusStakedShared")
                        .HasColumnType("bigint");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<long>("Deposit")
                        .HasColumnType("bigint");

                    b.Property<int>("Events")
                        .HasColumnType("integer");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<long>("Fees")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<bool?>("LBToggle")
                        .HasColumnType("boolean");

                    b.Property<int>("LBToggleEma")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("Operations")
                        .HasColumnType("bigint");

                    b.Property<int>("PayloadRound")
                        .HasColumnType("integer");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProposerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProtoCode")
                        .HasColumnType("integer");

                    b.Property<int?>("ResetBakerDeactivation")
                        .HasColumnType("integer");

                    b.Property<int?>("ResetProposerDeactivation")
                        .HasColumnType("integer");

                    b.Property<long?>("RevelationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedShared")
                        .HasColumnType("bigint");

                    b.Property<int?>("SoftwareId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Validations")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Level")
                        .IsUnique();

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProposerId");

                    b.HasIndex("ProtoCode");

                    b.HasIndex("RevelationId")
                        .IsUnique();

                    b.HasIndex("SoftwareId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Commitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(37)
                        .HasColumnType("character(37)")
                        .IsFixedLength();

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Commitments");
                });

            modelBuilder.Entity("Mvkt.Data.Models.ContractEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractCodeHash")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<string>("JsonPayload")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RawPayload")
                        .HasColumnType("bytea");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Type")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ContractCodeHash");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("JsonPayload");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("JsonPayload"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("JsonPayload"), new[] { "jsonb_path_ops" });

                    b.HasIndex("Level");

                    b.HasIndex("Tag");

                    b.HasIndex("TransactionId");

                    b.HasIndex("ContractCodeHash", "Tag");

                    b.HasIndex("ContractId", "Tag");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BlockBonusPerSlot")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockReward")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementRewardPerSlot")
                        .HasColumnType("bigint");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<long>("LBSubsidy")
                        .HasColumnType("bigint");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<long>("MaxBlockReward")
                        .HasColumnType("bigint");

                    b.Property<long>("NonceRevelationReward")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Seed")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea")
                        .IsFixedLength();

                    b.Property<int>("SnapshotIndex")
                        .HasColumnType("integer");

                    b.Property<int>("SnapshotLevel")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBakers")
                        .HasColumnType("integer");

                    b.Property<long>("TotalBakingPower")
                        .HasColumnType("bigint");

                    b.Property<long>("VdfRevelationReward")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Index");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DelegationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("PrevDelegateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<int?>("SenderCodeHash")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UnstakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnstakedPseudotokens")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnstakedRewards")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("PrevDelegateId");

                    b.HasIndex("SenderCodeHash")
                        .HasFilter("\"SenderCodeHash\" IS NOT NULL");

                    b.HasIndex("SenderId");

                    b.ToTable("DelegationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DelegatorCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<long>("DelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<int>("DelegatorId")
                        .HasColumnType("integer");

                    b.Property<long>("StakedBalance")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DelegatorId");

                    b.HasIndex("Cycle", "BakerId");

                    b.HasIndex("Cycle", "DelegatorId");

                    b.ToTable("DelegatorCycles");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<JsonElement?>("Data")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<bool>("Reverse")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.HasIndex("FirstLevel");

                    b.HasIndex("LastLevel");

                    b.HasIndex("Level");

                    b.HasIndex("Name");

                    b.HasIndex("Owner");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("LostExternalStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostExternalUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostUnstaked")
                        .HasColumnType("bigint");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundingLoss")
                        .HasColumnType("bigint");

                    b.Property<int>("SlashedLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleBakingOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("LostExternalStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostExternalUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostUnstaked")
                        .HasColumnType("bigint");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundingLoss")
                        .HasColumnType("bigint");

                    b.Property<int>("SlashedLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleEndorsingOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DoublePreendorsingOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("LostExternalStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostExternalUnstaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostStaked")
                        .HasColumnType("bigint");

                    b.Property<long>("LostUnstaked")
                        .HasColumnType("bigint");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundingLoss")
                        .HasColumnType("bigint");

                    b.Property<int>("SlashedLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoublePreendorsingOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DrainDelegateOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("TargetId");

                    b.ToTable("DrainDelegateOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.EndorsementOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<long>("Deposit")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("EndorsementOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.EndorsingRewardOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<long>("Expected")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("RewardLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedShared")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.ToTable("EndorsingRewardOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.InboxMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("bytea");

                    b.Property<int?>("PredecessorLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OperationId");

                    b.HasIndex("Type", "Id");

                    b.ToTable("InboxMessages");
                });

            modelBuilder.Entity("Mvkt.Data.Models.IncreasePaidStorageOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("IncreasePaidStorageOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.MigrationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("BalanceChange")
                        .HasColumnType("bigint");

                    b.Property<int?>("BigMapUpdates")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("ScriptId")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubIds")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TokenTransfers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Level");

                    b.HasIndex("ScriptId");

                    b.HasIndex("StorageId");

                    b.ToTable("MigrationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Nonce")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea")
                        .IsFixedLength();

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("RevealedCycle")
                        .HasColumnType("integer");

                    b.Property<int>("RevealedLevel")
                        .HasColumnType("integer");

                    b.Property<long>("RewardLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedShared")
                        .HasColumnType("bigint");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasAlternateKey("RevealedLevel");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RevealedCycle");

                    b.HasIndex("SenderId");

                    b.ToTable("NonceRevelationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.OriginationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int?>("BigMapUpdates")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractCodeHash")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("ScriptId")
                        .HasColumnType("integer");

                    b.Property<int?>("SenderCodeHash")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("SubIds")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TokenTransfers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractCodeHash")
                        .HasFilter("\"ContractCodeHash\" IS NOT NULL");

                    b.HasIndex("ContractId");

                    b.HasIndex("DelegateId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("Level");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OpHash");

                    b.HasIndex("ScriptId");

                    b.HasIndex("SenderCodeHash")
                        .HasFilter("\"SenderCodeHash\" IS NOT NULL");

                    b.HasIndex("SenderId");

                    b.HasIndex("StorageId");

                    b.ToTable("OriginationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.PreendorsementOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("PreendorsementOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<int>("FirstPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("LastPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.Property<long>("VotingPower")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Epoch");

                    b.HasIndex("Hash");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Mvkt.Data.Models.ProposalOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Duplicated")
                        .HasColumnType("boolean");

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VotingPower")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Epoch");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("Period");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProposalOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BallotQuorumMax")
                        .HasColumnType("integer");

                    b.Property<int>("BallotQuorumMin")
                        .HasColumnType("integer");

                    b.Property<long>("BaseIssuedPerMinute")
                        .HasColumnType("bigint");

                    b.Property<int>("BlockBonusWeight")
                        .HasColumnType("integer");

                    b.Property<long>("BlockDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockReward0")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockReward1")
                        .HasColumnType("bigint");

                    b.Property<int>("BlockRewardWeight")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerCommitment")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerCycle")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerSnapshot")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksPerVoting")
                        .HasColumnType("integer");

                    b.Property<int>("ByteCost")
                        .HasColumnType("integer");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<int>("ConsensusThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Dictator")
                        .HasColumnType("text");

                    b.Property<int>("DoubleBakingSlashedPercentage")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleEndorsingSlashedPercentage")
                        .HasColumnType("integer");

                    b.Property<long>("EndorsementDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementReward0")
                        .HasColumnType("bigint");

                    b.Property<long>("EndorsementReward1")
                        .HasColumnType("bigint");

                    b.Property<int>("EndorsersPerBlock")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsingRewardWeight")
                        .HasColumnType("integer");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<int>("FirstCycle")
                        .HasColumnType("integer");

                    b.Property<int>("FirstCycleLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("HardBlockGasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("HardOperationGasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("HardOperationStorageLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("LBSubsidyWeight")
                        .HasColumnType("integer");

                    b.Property<int>("LBToggleThreshold")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<long>("MaxBakingReward")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxDelegatedOverFrozenRatio")
                        .HasColumnType("integer");

                    b.Property<long>("MaxEndorsingReward")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxExternalOverOwnStakeRatio")
                        .HasColumnType("integer");

                    b.Property<int>("MaxSlashingPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("MinParticipationDenominator")
                        .HasColumnType("integer");

                    b.Property<int>("MinParticipationNumerator")
                        .HasColumnType("integer");

                    b.Property<long>("MinimalFrozenStake")
                        .HasColumnType("bigint");

                    b.Property<long>("MinimalStake")
                        .HasColumnType("bigint");

                    b.Property<int>("NoRewardCycles")
                        .HasColumnType("integer");

                    b.Property<int>("NonceRevelationRewardWeight")
                        .HasColumnType("integer");

                    b.Property<int>("OriginationSize")
                        .HasColumnType("integer");

                    b.Property<int>("PreservedCycles")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalQuorum")
                        .HasColumnType("integer");

                    b.Property<int>("RampUpCycles")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupChallengeWindow")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupCommitmentPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupOriginationSize")
                        .HasColumnType("integer");

                    b.Property<long>("SmartRollupStakeAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("SmartRollupTimeoutPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("StakePowerMultiplier")
                        .HasColumnType("integer");

                    b.Property<int>("TimeBetweenBlocks")
                        .HasColumnType("integer");

                    b.Property<int>("VdfRevelationRewardWeight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Btc")
                        .HasColumnType("double precision");

                    b.Property<double>("Cny")
                        .HasColumnType("double precision");

                    b.Property<double>("Eth")
                        .HasColumnType("double precision");

                    b.Property<double>("Eur")
                        .HasColumnType("double precision");

                    b.Property<double>("Gbp")
                        .HasColumnType("double precision");

                    b.Property<double>("Jpy")
                        .HasColumnType("double precision");

                    b.Property<double>("Krw")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Usd")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Level")
                        .IsUnique();

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RefutationGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("InitiatorCommitmentId")
                        .HasColumnType("integer");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<long?>("InitiatorLoss")
                        .HasColumnType("bigint");

                    b.Property<long?>("InitiatorReward")
                        .HasColumnType("bigint");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<long>("LastMoveId")
                        .HasColumnType("bigint");

                    b.Property<int>("OpponentCommitmentId")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<long?>("OpponentLoss")
                        .HasColumnType("bigint");

                    b.Property<long?>("OpponentReward")
                        .HasColumnType("bigint");

                    b.Property<int>("SmartRollupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirstLevel");

                    b.HasIndex("InitiatorCommitmentId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("LastLevel");

                    b.HasIndex("OpponentCommitmentId");

                    b.HasIndex("OpponentId");

                    b.HasIndex("SmartRollupId");

                    b.ToTable("RefutationGames");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RegisterConstantOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(54)
                        .HasColumnType("character varying(54)");

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .HasColumnType("text");

                    b.Property<int?>("Refs")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Value")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasFilter("\"Address\" is not null");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("RegisterConstantOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RevealOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("RevealOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RevelationPenaltyOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("Loss")
                        .HasColumnType("bigint");

                    b.Property<int>("MissedLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.ToTable("RevelationPenaltyOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodeHash")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CodeSchema")
                        .HasColumnType("bytea");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<bool>("Current")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("MigrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ParameterSchema")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("StorageSchema")
                        .HasColumnType("bytea");

                    b.Property<int>("TypeHash")
                        .HasColumnType("integer");

                    b.Property<byte[][]>("Views")
                        .HasColumnType("bytea[]");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ContractId", "Current")
                        .HasFilter("\"Current\" = true");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SetDepositsLimitOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Limit")
                        .HasColumnType("text");

                    b.Property<string>("OpHash")
                        .HasColumnType("text");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("SetDepositsLimitOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupAddMessagesOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MessagesCount")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("SmartRollupAddMessagesOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupCementOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("CommitmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("SmartRollupCementOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupCommitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveStakers")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("InboxLevel")
                        .HasColumnType("integer");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("PredecessorId")
                        .HasColumnType("integer");

                    b.Property<int>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<int>("Stakers")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Successors")
                        .HasColumnType("integer");

                    b.Property<long>("Ticks")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Hash");

                    b.HasIndex("InboxLevel");

                    b.HasIndex("LastLevel");

                    b.HasIndex("PredecessorId");

                    b.HasIndex("SmartRollupId");

                    b.HasIndex("Hash", "SmartRollupId");

                    b.ToTable("SmartRollupCommitments");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupExecuteOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("CommitmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("SubIds")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketTransfers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("SmartRollupId");

                    b.ToTable("SmartRollupExecuteOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupOriginateOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<string>("GenesisCommitment")
                        .HasColumnType("text");

                    b.Property<byte[]>("Kernel")
                        .HasColumnType("bytea");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<byte[]>("ParameterType")
                        .HasColumnType("bytea");

                    b.Property<int>("PvmKind")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("SmartRollupId");

                    b.ToTable("SmartRollupOriginateOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupPublishOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Bond")
                        .HasColumnType("bigint");

                    b.Property<int?>("BondStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("CommitmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("Flags")
                        .HasColumnType("integer");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("SmartRollupId");

                    b.HasIndex("SmartRollupId", "BondStatus", "SenderId")
                        .HasFilter("\"BondStatus\" IS NOT NULL");

                    b.ToTable("SmartRollupPublishOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupRecoverBondOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Bond")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<int?>("StakerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("SmartRollupId");

                    b.HasIndex("StakerId");

                    b.ToTable("SmartRollupRecoverBondOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupRefuteOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<long?>("DissectionEnd")
                        .HasColumnType("bigint");

                    b.Property<long?>("DissectionStart")
                        .HasColumnType("bigint");

                    b.Property<int?>("DissectionSteps")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GameStatus")
                        .HasColumnType("integer");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Move")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmartRollupId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("SmartRollupId");

                    b.ToTable("SmartRollupRefuteOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SnapshotBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("DelegatorsCount")
                        .HasColumnType("integer");

                    b.Property<long>("ExternalDelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("IssuedPseudotokens")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("OwnDelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("StakedPseudotokens")
                        .HasColumnType("bigint");

                    b.Property<int>("StakersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("Level", "AccountId", "BakerId");

                    b.HasIndex(new[] { "Level" }, "IX_SnapshotBalance_Level_Partial")
                        .HasFilter("\"AccountId\" = \"BakerId\"");

                    b.ToTable("SnapshotBalances");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlocksCount")
                        .HasColumnType("integer");

                    b.Property<string>("Extras")
                        .HasColumnType("jsonb");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ShortHash")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("Mvkt.Data.Models.StakingOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("ActivationCycle")
                        .HasColumnType("integer");

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<long?>("EdgeOfBakingOverStaking")
                        .HasColumnType("bigint");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int?>("FirstCycleUnstaked")
                        .HasColumnType("integer");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int?>("LastCycleUnstaked")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("LimitOfStakingOverBaking")
                        .HasColumnType("bigint");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<long?>("PrevStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long?>("Pseudotokens")
                        .HasColumnType("bigint");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("StakingOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cycle")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("TotalActivated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalBanished")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalBootstrapped")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalBurned")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCommitments")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalFrozen")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalLost")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalRollupBonds")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSmartRollupBonds")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Cycle")
                        .IsUnique()
                        .HasFilter("\"Cycle\" IS NOT NULL");

                    b.HasIndex("Date")
                        .IsUnique()
                        .HasFilter("\"Date\" IS NOT NULL");

                    b.HasIndex("Level")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<bool>("Current")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("MigrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RawValue")
                        .HasColumnType("bytea");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("ContractId", "Current")
                        .HasFilter("\"Current\" = true");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BalancesCount")
                        .HasColumnType("integer");

                    b.Property<int>("ContentHash")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FirstMinterId")
                        .HasColumnType("integer");

                    b.Property<int>("HoldersCount")
                        .HasColumnType("integer");

                    b.Property<string>("JsonContent")
                        .HasColumnType("jsonb");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RawContent")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RawType")
                        .HasColumnType("bytea");

                    b.Property<int>("TicketerId")
                        .HasColumnType("integer");

                    b.Property<string>("TotalBurned")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalMinted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalSupply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransfersCount")
                        .HasColumnType("integer");

                    b.Property<int>("TypeHash")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentHash");

                    b.HasIndex("FirstLevel");

                    b.HasIndex("FirstMinterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("JsonContent");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("JsonContent"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("JsonContent"), new[] { "jsonb_path_ops" });

                    b.HasIndex("LastLevel");

                    b.HasIndex("TicketerId");

                    b.HasIndex("TypeHash");

                    b.HasIndex("TicketerId", "TypeHash", "ContentHash");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TicketBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<int>("TicketerId")
                        .HasColumnType("integer");

                    b.Property<int>("TransfersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FirstLevel");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LastLevel");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketerId");

                    b.HasIndex("AccountId", "TicketId")
                        .IsUnique();

                    b.HasIndex("AccountId", "TicketerId");

                    b.ToTable("TicketBalances");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TicketTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FromId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("SmartRollupExecuteId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<int>("TicketerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToId")
                        .HasColumnType("integer");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransferTicketId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("SmartRollupExecuteId")
                        .HasFilter("\"SmartRollupExecuteId\" is not null");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketerId");

                    b.HasIndex("ToId");

                    b.HasIndex("TransactionId")
                        .HasFilter("\"TransactionId\" is not null");

                    b.HasIndex("TransferTicketId")
                        .HasFilter("\"TransferTicketId\" is not null");

                    b.ToTable("TicketTransfers");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BalancesCount")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FirstMinterId")
                        .HasColumnType("integer");

                    b.Property<int>("HoldersCount")
                        .HasColumnType("integer");

                    b.Property<int?>("IndexedAt")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Tags")
                        .HasColumnType("integer");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalBurned")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalMinted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalSupply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransfersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FirstMinterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IndexedAt")
                        .HasFilter("\"IndexedAt\" is not null");

                    b.HasIndex("LastLevel");

                    b.HasIndex("Metadata");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Metadata"), new[] { "jsonb_path_ops" });

                    b.HasIndex("ContractId", "TokenId")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TokenBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("IndexedAt")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<long>("TokenId")
                        .HasColumnType("bigint");

                    b.Property<int>("TransfersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasFilter("\"Balance\" != '0'");

                    b.HasIndex("ContractId")
                        .HasFilter("\"Balance\" != '0'");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IndexedAt")
                        .HasFilter("\"IndexedAt\" is not null");

                    b.HasIndex("LastLevel");

                    b.HasIndex("TokenId")
                        .HasFilter("\"Balance\" != '0'");

                    b.HasIndex("AccountId", "ContractId");

                    b.HasIndex("AccountId", "TokenId")
                        .IsUnique();

                    b.ToTable("TokenBalances");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TokenTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("FromId")
                        .HasColumnType("integer");

                    b.Property<int?>("IndexedAt")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("MigrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ToId")
                        .HasColumnType("integer");

                    b.Property<long>("TokenId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FromId")
                        .HasFilter("\"FromId\" is not null");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IndexedAt")
                        .HasFilter("\"IndexedAt\" is not null");

                    b.HasIndex("Level");

                    b.HasIndex("MigrationId")
                        .HasFilter("\"MigrationId\" is not null");

                    b.HasIndex("OriginationId")
                        .HasFilter("\"OriginationId\" is not null");

                    b.HasIndex("ToId")
                        .HasFilter("\"ToId\" is not null");

                    b.HasIndex("TokenId");

                    b.HasIndex("TransactionId")
                        .HasFilter("\"TransactionId\" is not null");

                    b.ToTable("TokenTransfers");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TransactionOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("BigMapUpdates")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Entrypoint")
                        .HasColumnType("text");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int?>("EventsCount")
                        .HasColumnType("integer");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<short?>("InternalDelegations")
                        .HasColumnType("smallint");

                    b.Property<short?>("InternalOperations")
                        .HasColumnType("smallint");

                    b.Property<short?>("InternalOriginations")
                        .HasColumnType("smallint");

                    b.Property<short?>("InternalTransactions")
                        .HasColumnType("smallint");

                    b.Property<string>("JsonParameters")
                        .HasColumnType("jsonb");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<byte[]>("RawParameters")
                        .HasColumnType("bytea");

                    b.Property<int?>("ResetDeactivation")
                        .HasColumnType("integer");

                    b.Property<int?>("SenderCodeHash")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("SubIds")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetCodeHash")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketTransfers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TokenTransfers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("JsonParameters");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("JsonParameters"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("JsonParameters"), new[] { "jsonb_path_ops" });

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderCodeHash")
                        .HasFilter("\"SenderCodeHash\" IS NOT NULL");

                    b.HasIndex("SenderId");

                    b.HasIndex("StorageId");

                    b.HasIndex("TargetCodeHash")
                        .HasFilter("\"TargetCodeHash\" IS NOT NULL");

                    b.HasIndex("TargetId");

                    b.ToTable("TransactionOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TransferTicketOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Entrypoint")
                        .HasColumnType("text");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<string>("JsonContent")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<byte[]>("RawContent")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RawType")
                        .HasColumnType("bytea");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("SubIds")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketTransfers")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TicketerId");

                    b.ToTable("TransferTicketOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupCommitOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Bond")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupCommitOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupDispatchTicketsOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupDispatchTicketsOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupFinalizeCommitmentOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupFinalizeCommitmentOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupOriginationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupOriginationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupRejectionOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("CommitterId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("Loss")
                        .HasColumnType("bigint");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommitterId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupRejectionOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupRemoveCommitmentOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupRemoveCommitmentOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupReturnBondOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<long>("Bond")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupReturnBondOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupSubmitBatchOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<int?>("RollupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RollupId");

                    b.HasIndex("SenderId");

                    b.ToTable("TxRollupSubmitBatchOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.UpdateConsensusKeyOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivationCycle")
                        .HasColumnType("integer");

                    b.Property<long?>("AllocationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("BakerFee")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("GasLimit")
                        .HasColumnType("integer");

                    b.Property<int>("GasUsed")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("PublicKeyHash")
                        .HasColumnType("text");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long?>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StorageUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("SenderId");

                    b.ToTable("UpdateConsensusKeyOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.VdfRevelationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasMaxLength(51)
                        .HasColumnType("character(51)")
                        .IsFixedLength();

                    b.Property<byte[]>("Proof")
                        .HasColumnType("bytea");

                    b.Property<long>("RewardLiquid")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedOwn")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardStakedShared")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Solution")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Cycle");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("VdfRevelationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.VotingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BallotsQuorum")
                        .HasColumnType("integer");

                    b.Property<int>("Dictator")
                        .HasColumnType("integer");

                    b.Property<int>("Epoch")
                        .HasColumnType("integer");

                    b.Property<int>("FirstLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int>("LastLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("NayBallots")
                        .HasColumnType("integer");

                    b.Property<long?>("NayVotingPower")
                        .HasColumnType("bigint");

                    b.Property<int?>("ParticipationEma")
                        .HasColumnType("integer");

                    b.Property<int?>("PassBallots")
                        .HasColumnType("integer");

                    b.Property<long?>("PassVotingPower")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProposalsCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("SingleWinner")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("Supermajority")
                        .HasColumnType("integer");

                    b.Property<int?>("TopUpvotes")
                        .HasColumnType("integer");

                    b.Property<long?>("TopVotingPower")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalBakers")
                        .HasColumnType("integer");

                    b.Property<long?>("TotalVotingPower")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpvotesQuorum")
                        .HasColumnType("integer");

                    b.Property<int?>("YayBallots")
                        .HasColumnType("integer");

                    b.Property<long?>("YayVotingPower")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Index");

                    b.HasIndex("Epoch");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("VotingPeriods");
                });

            modelBuilder.Entity("Mvkt.Data.Models.VotingSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VotingPower")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Period");

                    b.HasIndex("Period", "BakerId")
                        .IsUnique();

                    b.ToTable("VotingSnapshots");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Contract", b =>
                {
                    b.HasBaseType("Mvkt.Data.Models.Account");

                    b.Property<int>("CodeHash")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("CreatorId");

                    b.Property<int>("EventsCount")
                        .HasColumnType("integer");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Spendable")
                        .HasColumnType("boolean");

                    b.Property<int>("Tags")
                        .HasColumnType("integer");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TokensCount")
                        .HasColumnType("integer");

                    b.Property<int>("TypeHash")
                        .HasColumnType("integer");

                    b.Property<int?>("WeirdDelegateId")
                        .HasColumnType("integer");

                    b.HasIndex("CodeHash");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TypeHash");

                    b.HasIndex("WeirdDelegateId");

                    b.HasIndex("Type", "Kind")
                        .HasFilter("\"Type\" = 2");

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("Mvkt.Data.Models.Rollup", b =>
                {
                    b.HasBaseType("Mvkt.Data.Models.Account");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("CreatorId");

                    b.HasIndex("CreatorId");

                    b.HasDiscriminator().HasValue((byte)4);
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollup", b =>
                {
                    b.HasBaseType("Mvkt.Data.Models.Account");

                    b.Property<int>("ActiveStakers")
                        .HasColumnType("integer");

                    b.Property<int>("CementedCommitments")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("CreatorId");

                    b.Property<int>("ExecutedCommitments")
                        .HasColumnType("integer");

                    b.Property<string>("GenesisCommitment")
                        .HasColumnType("text");

                    b.Property<int>("InboxLevel")
                        .HasColumnType("integer");

                    b.Property<string>("LastCommitment")
                        .HasColumnType("text");

                    b.Property<int>("OrphanCommitments")
                        .HasColumnType("integer");

                    b.Property<int>("PendingCommitments")
                        .HasColumnType("integer");

                    b.Property<int>("PvmKind")
                        .HasColumnType("integer");

                    b.Property<int>("RefutedCommitments")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStakers")
                        .HasColumnType("integer");

                    b.HasIndex("CreatorId");

                    b.HasDiscriminator().HasValue((byte)5);
                });

            modelBuilder.Entity("Mvkt.Data.Models.User", b =>
                {
                    b.HasBaseType("Mvkt.Data.Models.Account");

                    b.Property<bool?>("Activated")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<int>("RegisterConstantsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Revealed")
                        .HasColumnType("boolean");

                    b.Property<int>("SetDepositsLimitsCount")
                        .HasColumnType("integer");

                    b.Property<long>("StakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("StakedPseudotokens")
                        .HasColumnType("bigint");

                    b.Property<int>("StakingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("UnstakedBakerId")
                        .HasColumnType("integer");

                    b.Property<long>("UnstakedBalance")
                        .HasColumnType("bigint");

                    b.HasIndex("UnstakedBakerId")
                        .HasFilter("\"UnstakedBakerId\" IS NOT NULL");

                    b.HasDiscriminator().HasValue((byte)0);
                });

            modelBuilder.Entity("Mvkt.Data.Models.Delegate", b =>
                {
                    b.HasBaseType("Mvkt.Data.Models.User");

                    b.Property<int>("ActivationLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AutostakingOpsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BallotsCount")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksCount")
                        .HasColumnType("integer");

                    b.Property<int>("DeactivationLevel")
                        .HasColumnType("integer");

                    b.Property<long>("DelegatedBalance")
                        .HasColumnType("bigint");

                    b.Property<int>("DelegatorsCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleBakingCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoubleEndorsingCount")
                        .HasColumnType("integer");

                    b.Property<int>("DoublePreendorsingCount")
                        .HasColumnType("integer");

                    b.Property<long?>("EdgeOfBakingOverStaking")
                        .HasColumnType("bigint");

                    b.Property<int>("EndorsementsCount")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsingRewardsCount")
                        .HasColumnType("integer");

                    b.Property<long>("ExternalStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalUnstakedBalance")
                        .HasColumnType("bigint");

                    b.Property<long?>("FrozenDepositLimit")
                        .HasColumnType("bigint");

                    b.Property<long>("IssuedPseudotokens")
                        .HasColumnType("bigint");

                    b.Property<long?>("LimitOfStakingOverBaking")
                        .HasColumnType("bigint");

                    b.Property<int>("NonceRevelationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("PreendorsementsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RevelationPenaltiesCount")
                        .HasColumnType("integer");

                    b.Property<int?>("SoftwareId")
                        .HasColumnType("integer");

                    b.Property<int>("StakersCount")
                        .HasColumnType("integer");

                    b.Property<long>("StakingBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalStakedBalance")
                        .HasColumnType("bigint");

                    b.Property<int>("VdfRevelationsCount")
                        .HasColumnType("integer");

                    b.HasIndex("SoftwareId");

                    b.HasIndex("Type", "Staked")
                        .HasFilter("\"Type\" = 1");

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("Mvkt.Data.Models.Account", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Delegate")
                        .WithMany("DelegatedAccounts")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Mvkt.Data.Models.Block", "FirstBlock")
                        .WithMany("CreatedAccounts")
                        .HasForeignKey("FirstLevel")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delegate");

                    b.Navigation("FirstBlock");
                });

            modelBuilder.Entity("Mvkt.Data.Models.ActivationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.User", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Activations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Mvkt.Data.Models.BallotOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Ballots")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Proposal");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Block", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Proposer")
                        .WithMany()
                        .HasForeignKey("ProposerId");

                    b.HasOne("Mvkt.Data.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtoCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.NonceRevelationOperation", "Revelation")
                        .WithOne("RevealedBlock")
                        .HasForeignKey("Mvkt.Data.Models.Block", "RevelationId");

                    b.HasOne("Mvkt.Data.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId");

                    b.Navigation("Proposer");

                    b.Navigation("Protocol");

                    b.Navigation("Revelation");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DelegationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId");

                    b.HasOne("Mvkt.Data.Models.Account", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Delegations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "PrevDelegate")
                        .WithMany()
                        .HasForeignKey("PrevDelegateId");

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Delegate");

                    b.Navigation("Initiator");

                    b.Navigation("PrevDelegate");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Accuser")
                        .WithMany()
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("DoubleBakings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accuser");

                    b.Navigation("Block");

                    b.Navigation("Offender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Accuser")
                        .WithMany()
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("DoubleEndorsings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accuser");

                    b.Navigation("Block");

                    b.Navigation("Offender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DoublePreendorsingOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Accuser")
                        .WithMany()
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("DoublePreendorsings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accuser");

                    b.Navigation("Block");

                    b.Navigation("Offender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.DrainDelegateOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("DrainDelegateOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Mvkt.Data.Models.EndorsementOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Endorsements")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Delegate");
                });

            modelBuilder.Entity("Mvkt.Data.Models.IncreasePaidStorageOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("IncreasePaidStorageOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.MigrationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Migrations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId");

                    b.HasOne("Mvkt.Data.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.Navigation("Account");

                    b.Navigation("Block");

                    b.Navigation("Script");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Mvkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Revelations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baker");

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.OriginationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Mvkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId");

                    b.HasOne("Mvkt.Data.Models.Account", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Originations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Mvkt.Data.Models.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId");

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.Navigation("Block");

                    b.Navigation("Contract");

                    b.Navigation("Delegate");

                    b.Navigation("Initiator");

                    b.Navigation("Manager");

                    b.Navigation("Script");

                    b.Navigation("Sender");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Mvkt.Data.Models.PreendorsementOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Preendorsements")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Delegate");
                });

            modelBuilder.Entity("Mvkt.Data.Models.ProposalOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Proposals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Delegate", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Proposal");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RegisterConstantOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("RegisterConstants")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RevealOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Reveals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.RevelationPenaltyOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("RevelationPenalties")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baker");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SetDepositsLimitOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SetDepositsLimits")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupAddMessagesOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupAddMessagesOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupCementOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupCementOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupExecuteOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupExecuteOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupOriginateOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupOriginateOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupPublishOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupPublishOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupRecoverBondOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupRecoverBondOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.SmartRollupRefuteOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("SmartRollupRefuteOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.StakingOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("StakingOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TransactionOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Account", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.HasOne("Mvkt.Data.Models.Account", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Block");

                    b.Navigation("Initiator");

                    b.Navigation("Sender");

                    b.Navigation("Storage");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TransferTicketOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TransferTicketOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupCommitOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupCommitOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupDispatchTicketsOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupDispatchTicketsOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupFinalizeCommitmentOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupFinalizeCommitmentOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupOriginationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupOriginationOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupRejectionOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupRejectionOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupRemoveCommitmentOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupRemoveCommitmentOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupReturnBondOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupReturnBondOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.TxRollupSubmitBatchOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("TxRollupSubmitBatchOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.UpdateConsensusKeyOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("UpdateConsensusKeyOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mvkt.Data.Models.VdfRevelationOperation", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Delegate", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvkt.Data.Models.Block", "Block")
                        .WithMany("VdfRevelationOps")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baker");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Contract", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Mvkt.Data.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Mvkt.Data.Models.User", "WeirdDelegate")
                        .WithMany()
                        .HasForeignKey("WeirdDelegateId");

                    b.Navigation("Creator");

                    b.Navigation("Manager");

                    b.Navigation("WeirdDelegate");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Delegate", b =>
                {
                    b.HasOne("Mvkt.Data.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Block", b =>
                {
                    b.Navigation("Activations");

                    b.Navigation("Ballots");

                    b.Navigation("CreatedAccounts");

                    b.Navigation("Delegations");

                    b.Navigation("DoubleBakings");

                    b.Navigation("DoubleEndorsings");

                    b.Navigation("DoublePreendorsings");

                    b.Navigation("DrainDelegateOps");

                    b.Navigation("Endorsements");

                    b.Navigation("IncreasePaidStorageOps");

                    b.Navigation("Migrations");

                    b.Navigation("Originations");

                    b.Navigation("Preendorsements");

                    b.Navigation("Proposals");

                    b.Navigation("RegisterConstants");

                    b.Navigation("Reveals");

                    b.Navigation("RevelationPenalties");

                    b.Navigation("Revelations");

                    b.Navigation("SetDepositsLimits");

                    b.Navigation("SmartRollupAddMessagesOps");

                    b.Navigation("SmartRollupCementOps");

                    b.Navigation("SmartRollupExecuteOps");

                    b.Navigation("SmartRollupOriginateOps");

                    b.Navigation("SmartRollupPublishOps");

                    b.Navigation("SmartRollupRecoverBondOps");

                    b.Navigation("SmartRollupRefuteOps");

                    b.Navigation("StakingOps");

                    b.Navigation("Transactions");

                    b.Navigation("TransferTicketOps");

                    b.Navigation("TxRollupCommitOps");

                    b.Navigation("TxRollupDispatchTicketsOps");

                    b.Navigation("TxRollupFinalizeCommitmentOps");

                    b.Navigation("TxRollupOriginationOps");

                    b.Navigation("TxRollupRejectionOps");

                    b.Navigation("TxRollupRemoveCommitmentOps");

                    b.Navigation("TxRollupReturnBondOps");

                    b.Navigation("TxRollupSubmitBatchOps");

                    b.Navigation("UpdateConsensusKeyOps");

                    b.Navigation("VdfRevelationOps");
                });

            modelBuilder.Entity("Mvkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.Navigation("RevealedBlock");
                });

            modelBuilder.Entity("Mvkt.Data.Models.Delegate", b =>
                {
                    b.Navigation("DelegatedAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
